<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>blog - Tech</title><link href="http://blog.lucywyman.me/" rel="alternate"></link><link href="http://blog.lucywyman.me/feeds/tech.atom.xml" rel="self"></link><id>http://blog.lucywyman.me/</id><updated>2019-04-13T00:00:00-07:00</updated><entry><title>Promting for Sudo Password in Travis</title><link href="http://blog.lucywyman.me/prompting-for-sudo-in-travis.html" rel="alternate"></link><published>2019-04-13T00:00:00-07:00</published><updated>2019-04-13T00:00:00-07:00</updated><author><name>Lucy Wyman</name></author><id>tag:blog.lucywyman.me,2019-04-13:/prompting-for-sudo-in-travis.html</id><summary type="html">&lt;p&gt;&amp;quot;Lucy, why would you want to do this? ARE YOU OK?&amp;quot;
It's true: making Travis print the sudo prompt and enter it's password
is not a common use case. We were testing a new feature in &lt;a class="reference external" href="https://puppet.com/docs/bolt/"&gt;Bolt&lt;/a&gt;
which opens a subprocess on the local machine and runs a command as …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&amp;quot;Lucy, why would you want to do this? ARE YOU OK?&amp;quot;
It's true: making Travis print the sudo prompt and enter it's password
is not a common use case. We were testing a new feature in &lt;a class="reference external" href="https://puppet.com/docs/bolt/"&gt;Bolt&lt;/a&gt;
which opens a subprocess on the local machine and runs a command as a
different user (&lt;a class="reference external" href="https://github.com/puppetlabs/bolt/blob/master/lib/bolt/transport/local/shell.rb#L29-L45"&gt;code&lt;/a&gt;, &lt;a class="reference external" href="https://puppet.com/docs/bolt/latest/bolt_configuration_options.html#local-transport-configuration-options"&gt;docs&lt;/a&gt;). We like to have as many tests in
Travis so that our users and contributors see if their own code breaks
tests (as opposed to our acceptance tests which run nightly in
Jenkins). So, to test this properly in Travis, I needed to make the
&lt;code&gt;travis&lt;/code&gt; user be prompted for sudo.&lt;/p&gt;
&lt;p&gt;I initially tried creating a different user and running the test as
that user, so that I didn't have to mess with the sudo configuration
of &lt;code&gt;travis&lt;/code&gt;. This turned out to be more difficult than
expected, since switching the user opens a new login which stops the
tests from running.&lt;/p&gt;
&lt;p&gt;So, we were stuck with &lt;code&gt;travis&lt;/code&gt;. Here's the magic lines I added
to the 'before_script' section of &lt;code&gt;.travis.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo &amp;#39;travis:travis&amp;#39; | sudo chpasswd&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sudo sh -c &amp;quot;echo &amp;#39;Defaults authenticate&amp;#39; &amp;gt;&amp;gt; /etc/sudoers&amp;quot;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sudo sh -c &amp;quot;echo &amp;#39;travis  ALL=(ALL) PASSWD:ALL&amp;#39; &amp;gt;&amp;gt; /etc/sudoers&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default Travis sets &lt;code&gt;Defaults !authenticate&lt;/code&gt; and
&lt;code&gt;travis ALL=(ALL) NOPASSWD:ALL&lt;/code&gt; in
&lt;code&gt;/etc/sudoers.d/travis&lt;/code&gt;. The first thing we needed to do was
give &lt;code&gt;travis&lt;/code&gt; a password so that we could still authenticate,
then undo this sudo config. Also worth noting: you must set the
&lt;code&gt;NOPASSWD&lt;/code&gt; line last, otherwise you won't be able to use sudo to
modify the sudo config!&lt;/p&gt;
&lt;p&gt;Et voila! We can test prompting for a sudo password in Travis.&lt;/p&gt;
</content><category term="tech"></category></entry><entry><title>Puppetize Live 2018</title><link href="http://blog.lucywyman.me/puppetize-live-2018.html" rel="alternate"></link><published>2018-10-14T00:00:00-07:00</published><updated>2018-10-14T00:00:00-07:00</updated><author><name>Lucy Wyman</name></author><id>tag:blog.lucywyman.me,2018-10-14:/puppetize-live-2018.html</id><summary type="html">&lt;p&gt;I'm writing this on the plane home from Amsterdam after an exciting,
challenging, educational, and ultimately successful week. For those
that don't know &lt;a class="reference external" href="https://puppet.com"&gt;Puppet&lt;/a&gt; conducted &lt;a class="reference external" href="https://puppet.com/blog/puppetize-live-cfp"&gt;a grand experiment&lt;/a&gt; this year:
instead of hosting a multi-day, multi-track conference (nee
Puppetconf), our annual celebration was a single-track, live streamed
event that ran …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm writing this on the plane home from Amsterdam after an exciting,
challenging, educational, and ultimately successful week. For those
that don't know &lt;a class="reference external" href="https://puppet.com"&gt;Puppet&lt;/a&gt; conducted &lt;a class="reference external" href="https://puppet.com/blog/puppetize-live-cfp"&gt;a grand experiment&lt;/a&gt; this year:
instead of hosting a multi-day, multi-track conference (nee
Puppetconf), our annual celebration was a single-track, live streamed
event that ran for 22 hours across 3 cities. A lot of people had a lot
of feelings about it, so I'll stick to speaking for myself and my
experiences in this post.&lt;/p&gt;
&lt;p&gt;When I first heard about the new format I was genuinely excited. I
attend a lot of conferences of varying quality and formats, and I
appreciated how Puppet was trying to 1. Increase community involvement
and the accessibility of PuppetConf, 2. Reach out on a global scale
rather than happen just in the US, and 3. Focus more on content and
less on the 'party'. Each of these goals aligned strongly with my
personal values and those of the company, and I had never heard of a
conference trying this format so was interested to see how it would
go. It was and is a great idea.&lt;/p&gt;
&lt;p&gt;We got a lot of negative feedback throughout the conference process,
from when we announced it through the conference itself. I don't want
to harp on it here - we've talked about it enough internally and I'd
only be spiralling in the same eddies of negativity. I was surprised
and disappointed in the Puppet community, and while I heard only
1/10th of the abuse our organizers got it changed my expectations
going into the event for the worse, and made me equal parts defensive
/ wary / pressured / upset.&lt;/p&gt;
&lt;p&gt;I was lucky enough to be sent to AMSTERDAM to talk about &lt;a class="reference external" href="https://github.com/puppetlabs/bolt"&gt;Bolt&lt;/a&gt;, the
project I work on, and even luckier to be going with some really
fantastic coworkers.&lt;/p&gt;
&lt;p&gt;A quick aside, while we're talking about coworkers. International
travel is stressful. Running a conference, especially an experimental
one, is stressful. Doing both of these at the same time is borderline
insane. The people I work with didn't just put on a fantastic event,
they did so with compassion, humanity, empathy, and selflessness.
They were calm and kind in the most strenuous, frustrating,
nerve-wracking circumstances. They communicated clearly, were
respectful of everyone involved, and pulled off an international event
with barely a hiccup. But most of all, I really enjoyed getting to
travel with them. It's so rare that you can say you work well with
everyone on your team, let alone that you enjoy spending &lt;em&gt;18 hours a
day in a foreign country for a week with your team&lt;/em&gt;. I can't believe
how fortunate I am to work with humans who are so nice, understanding,
and friendly, and who I still want to go to dinner with at 8pm after
getting up at 6am and rehearsing together for ~10 hours.&lt;/p&gt;
&lt;p&gt;Ok, gushy aside over. I got into Amsterdam on Sunday, and spent most
of Monday and Tuesday rehearsing my &lt;a class="reference external" href="https://youtu.be/YpbhaRRBv-Y"&gt;keynote demo&lt;/a&gt; and prepping for
my &lt;a class="reference external" href="https://youtu.be/HfXkD9GAVxY"&gt;Bolt talk&lt;/a&gt;.  Tuesday night was the first 'official' event of
Puppetize, a pre-event meetup at a cute nearby pub. There were maybe 3
or 4 dozen people there, a mix of Puppet customers, open source Puppet
users, and Puppet employees. Maybe it was because I was so jet lagged
still, maybe it was because of the aforementioned animosity towards
the new event, maybe it was cultural differences, or maybe it was just
my imagination, but it felt like a lot of the people I talked to were
weirdly....skeptical? I couldn't tell if they didn't think I was
technical (no surprise there weren't a ton of female engineers...), if
they weren't sure what the event was about, or if these things are
just more awkward than I remembered.  Thinking back to the Puppet
Contributor Summit last year, it felt like everyone I talked to
&lt;em&gt;loved&lt;/em&gt; Puppet, and was really excited about the work we were doing -
or at least interested in our new tools.  For whatever reason, this
event felt more like people were asking &amp;quot;Prove to me that this was
worth my time&amp;quot;. It wasn't all bad, I had some interesting
conversations, but it was less good than in previous years.&lt;/p&gt;
&lt;p&gt;The next morning we got up bright and early, and arrived at the venue
before any of the coffee shops had even opened. We all paced around
nervously while A/V set up, and then we got to &lt;em&gt;have our makeup done&lt;/em&gt;.
Yeah! Puppet hired a makeup artist to make sure we didn't look shiny
on camera, and she was nice enough to do a full face of makeup for me.
I've never had my makeup done before, and it was an entirely new and
mostly pleasant experience. I felt so nervous that she would do
something I didn't like - you should have seen my face when she pulled
out a curling iron - but of course she did a great job and it ended up
being really fun and feeling very luxurious to have someone do my
makeup.&lt;/p&gt;
&lt;p&gt;Then it was time to go! We all watched the keynotes progress
backstage, going out in turn as it was our turn. My role was to run 2
out of 4 product demos, first of Bolt (the easy one, obviously) then
of &lt;a class="reference external" href="https://puppet.com/blog/continuous-delivery-puppet-enterprise-simplifies-code-tracking-test-results"&gt;Continuous Delivery for Puppet Enterprise (CD4PE)&lt;/a&gt;. I thought the
demos went well, specifically because we had been rehearsing so much
in the last few days. I hit all my talking points, I sounded confident
and knowledgeable, and I felt I showed both tools in their best light.&lt;/p&gt;
&lt;p&gt;After the keynotes we got to mingle with attendees for a bit, which is
always the best part of conferences. People were excited about Bolt,
which was exciting for us, and there was a good mix of easy-to-answer
technical questions and interesting-to-consider questions about where
we would take the project from here. I had never heard of &lt;a class="reference external" href="https://choria.io/"&gt;Choria&lt;/a&gt;
before, but we fielded a lot of questions about it's compatibility,
as well as how Bolt could replace some of &lt;a class="reference external" href="https://puppet.com/docs/mcollective/current/index.html"&gt;MCollective's&lt;/a&gt;
functionality. A lot of folks I talked to were on old versions of
Puppet (3.8 or earlier), and while they were trying to upgrade there
were a lot of challenges, MCO's deprecation being one of many. The
other topic we heard a lot about was credential management, and
developing workflows for authenticating bolt with different parts of
their infrastructure.&lt;/p&gt;
&lt;p&gt;Next up was talks, and mine was last in the morning set. I'll be
honest, I didn't really hear much of the other 2 talks since I was
buzzing with so much nervousness and excitement about my own talk.
While I'm a practiced public speaker, this talk felt like it had
higher stakes than many of my other talks: rather than being for a
bunch of strangers, I knew many of my coworkers and friends would
likely watch this talk, and that it could really impact the success of
our project. I wasn't nervous that my talk wouldn't go well, but that
it wouldn't be well received or that if it &lt;em&gt;didn't&lt;/em&gt; go well it could
have real consequences.&lt;/p&gt;
&lt;p&gt;But once I took the stage, I was in my comfort zone. Bolt is the
easiest topic in the world to talk about since it's the thing I spend
most of my waking hours thinking about. I wish I had polished my demo
more, and used VMs instead of a canned demo (for obvious reasons, if
you watch). But demo flubs are nothing new in tech talks, and I
thought overall that I showed Bolt off well. I crammed a lot of
features into not a lot of time, and while others on my team could
probably have done a better job I felt I had done the best I could
(again, demo aside).&lt;/p&gt;
&lt;p&gt;After talks, there was lunch and more mingling with users. Now more
people had more easy-technical questions about bolt, and it was
exciting to hear some folks had already downloaded and started playing
with it. One of my favorite things about the project is how easy it is
to understand, explain, and get started with, which makes those first
user experiences fun rather than frustrating. A member from my team,
Nick, was fielding questions as well, and after the adrenaline of both
talks that morning and lingering jet lag I felt pretty zoned out by
the end of lunch. I took a walk and a long lunch, and made sure to be
back in time for &lt;a class="reference external" href="https://youtu.be/qMNR2KQz7Kg"&gt;Paula and Helen's&lt;/a&gt; talk that afternoon.&lt;/p&gt;
&lt;p&gt;Though I'd already seen a practice version, I really enjoyed their
talk. It was funny and informative, and focused on making life easier
for our community and contributors. As always, I'm a sucker for an
open source software talk, and thought they did a great job! I'm
reasonably certain it was their first time speaking, too, and you'd
never know it from their performance.&lt;/p&gt;
&lt;p&gt;I left to hang out at the Puppet booth a bit and answer questions
about Puppet during the last talk. Then was our after-hours event,
Puppet Connect. I think there was supposed to be a community aspect to
this event, similar to a mini-contributor-summit, but it ended up
falling a bit flat. In the end I just spent more time talking to
users, some of whom were familiar faces by now, and then we headed out
to a celebratory dinner. With that, the curtain had closed on
Puppetize Live 2018!&lt;/p&gt;
&lt;div class="section" id="the-good"&gt;
&lt;h2&gt;The Good&lt;/h2&gt;
&lt;p&gt;We had a lot of positive feedback about the event during it. I heard
so many times that folks would never be able to go to San Francisco
for a week for PuppetConf, but could easily travel anywhere in Europe
for a day or 2. After so much negativity, this feedback made my heart
sing since that was the whole point! I was so glad that people who
would not have otherwise been able to participate were able to come.&lt;/p&gt;
&lt;p&gt;The positive side of the live stream is that everything was published
online pretty shortly after airing. It was great to be able to refer
folks to talks that had happened in other timezones, and know that it
would only take 25 minutes of their time to get caught up on a topic
or tool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-bad"&gt;
&lt;h2&gt;The Bad&lt;/h2&gt;
&lt;p&gt;Puppetize Live felt a lot smaller than PuppetConf, and while I didn't
necessarily miss the 'party' aspect of PuppetConf I did miss the
feeling of a large Puppet community coming together and celebrating.
This felt more like a glorified meetup than a conference, and while
a more intimate event was great in some ways it overall made the
experience feel more empty. I didn't feel the same sense of awe at how
our software was impacting the world, but felt more like I was trying
to convince people it was worth their time.&lt;/p&gt;
&lt;p&gt;Similarly, the Puppet open source community felt much smaller and like
a 'side event'. The contributor summit last year felt big and
important, and made the community feel vibrant. Puppet connect was by
comparison tiny, insignificant, and dominated by long standing
community members (so it didn't feel like there was really room for me
at the table, literally and figuratively), and felt like an
afterthought. This also made the open-source and community aspects of
Puppet feel understated, and I wished we had more emphasis on what our
users were doing with Puppet than the new products.&lt;/p&gt;
&lt;p&gt;Lastly, I was disappointed with the live-stream and slack participation.
It seemed like not many folks watched, and even fewer commented in
channel. Those who did comment would comment on what they didn't like
about talks, rather than asking questions or talking about the
technology. It brought out people's troll-iest behavior, which was
disheartening.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="overall"&gt;
&lt;h2&gt;Overall&lt;/h2&gt;
&lt;p&gt;I'm proud of the event we held and of my role in it, and
disappointed that it felt like that didn't resonate with our
community. I had a lot of fun, and feel a renewed connection to
working for Puppet as a company and working on Bolt as a project. I
love my job, and felt a renewed sense of purpose after Puppetize. But
I also felt disheartened by the lack of enthusiasm from others, and
hope that as an organization we can find new ways to get people pumped
about our software.&lt;/p&gt;
&lt;/div&gt;
</content><category term="conferences"></category><category term="tech"></category><category term="experiences"></category></entry><entry><title>OSCON 2018</title><link href="http://blog.lucywyman.me/oscon-2018.html" rel="alternate"></link><published>2018-07-20T00:00:00-07:00</published><updated>2018-07-20T00:00:00-07:00</updated><author><name>Lucy Wyman</name></author><id>tag:blog.lucywyman.me,2018-07-20:/oscon-2018.html</id><summary type="html">&lt;p&gt;OSCON 2018 is officially in the books, and I have to say this one was
a stand out. A combination of career advancement (read: getting
smarter), gaining experience, and having a number of contacts old and
new at the conference made it a particularly great experience. I've
gotten to the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;OSCON 2018 is officially in the books, and I have to say this one was
a stand out. A combination of career advancement (read: getting
smarter), gaining experience, and having a number of contacts old and
new at the conference made it a particularly great experience. I've
gotten to the point where I'm better at choosing talks that are
relevant to my field, and I have context to learn from them but don't
know enough to get nothing from them. This is all a long way of saying
that I have a lot of meaningful takeaways from this conf and can start
applying to my work immediately, as well as a lot of great experiences
reconnecting with old friends and solidifying my relationship with new
ones!&lt;/p&gt;
&lt;p&gt;TL;DR: Videos won't be available for 3-4 weeks, but when they are I
highly recommend:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://conferences.oreilly.com/oscon/oscon-or/public/schedule/detail/67766"&gt;Building Your Own Cryptocurrency&lt;/a&gt; for understanding how fiat
currency works, and what that means for cryptocurrency&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://conferences.oreilly.com/oscon/oscon-or/public/schedule/detail/66984"&gt;Istio&lt;/a&gt; for understanding what Istio is and how it works&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://conferences.oreilly.com/oscon/oscon-or/public/schedule/detail/66328"&gt;GRPC vs. REST&lt;/a&gt; for an entertaining comparison of REST and gRPC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's a play-by-play rundown of the last 2 days:&lt;/p&gt;
&lt;div class="section" id="day-1-keynotes"&gt;
&lt;h2&gt;Day 1 Keynotes&lt;/h2&gt;
&lt;div class="section" id="live-coding-oscon-edition"&gt;
&lt;h3&gt;&lt;a class="reference external" href="https://conferences.oreilly.com/oscon/oscon-or/public/schedule/detail/70443"&gt;Live Coding: OSCON Edition&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Suz Hinton&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This talk was so inspiring! Once I started working I stopped playing
with technology as much, and trying new things just for the fun of it.
So what if I'm not building something useful? What if we just built
things for fun, to learn? I used to do this often on the weekends
during university, and feel I've lost that sense of adventure and
curiosity since I started working. I have a dusty arduino at the house
that I've been uninspired to build something with. This talk inspired
me to just start &lt;em&gt;playing&lt;/em&gt; with it, and not worry about if it was
useful in the end.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="recognizing-cultural-bias-in-ai"&gt;
&lt;h3&gt;&lt;a class="reference external" href="https://conferences.oreilly.com/oscon/oscon-or/public/schedule/detail/69646"&gt;Recognizing Cultural Bias in AI&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Camille Eddy&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I'm embarrassed to admit I've never considered that AI would inherit
our human biases, or how that would impact marginalized groups. Eddy
told the story of &lt;a class="reference external" href="https://www.media.mit.edu/people/joyab/overview/"&gt;MIT researcher Joy Buolamwini&lt;/a&gt;, who wasn't
recognized by the facial recognition AI she was developing until she
wore a white mask, to demonstrate how our own biases and inequalities
translate to the tools we develop. This talk reenergized me to
continue working toward a more diverse tech industry, and to continue
advocating for diversity and inclusion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="open-source-and-open-standards-in-the-age-of-cloud-ai"&gt;
&lt;h3&gt;&lt;a class="reference external" href="https://conferences.oreilly.com/oscon/oscon-or/public/schedule/detail/70444"&gt;Open source and open standards in the age of cloud AI&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Tim O'Reilly&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;O'Reilly reaffirmed and expanded on Eddy's talk, discussing how
algorithms and AI impact who gets what and why. It was really about
how open standards, open data, and community are the backbone of
successful technology, and how new technical industries like AI and
cloud computing will need to embrace and serve their communities
rather than shut them out.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="introduction-to-blockchains"&gt;
&lt;h2&gt;&lt;a class="reference external" href="https://conferences.oreilly.com/oscon/oscon-or/public/schedule/detail/67153"&gt;Introduction to Blockchains&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;By ME&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This was my talk! I won the scheduling lottery being assigned the
first timeslot on the first day. The room was packed with people, and
everyone was engaged and excited to learn about cool math! I'll be
totally honest: most of the time when I finish a talk I pick it apart
and dwell on what I could have done better. While this talk definitely
wasn't &lt;em&gt;perfect&lt;/em&gt;, I'm genuinely really proud of my delivery. I can
tell my public speaking style is improving and that practicing this
talk early and often paid off. I felt very in control of the
talk and the audience, and capable of answering any questions. All in
all, a talk I'm excited to give again!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mary-had-a-little-lambda"&gt;
&lt;h2&gt;&lt;a class="reference external" href="https://conferences.oreilly.com/oscon/oscon-or/public/schedule/detail/67384"&gt;Mary Had a Little Lambda&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Anjana Vakil&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I think I knew too much going into this talk. I know I just wrote
about how I'm getting better at choosing talks, and that's because
this is the only talk I felt overqualified for. A review of lambda
functions it turns out I didn't need.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr-nist-container-security-standards"&gt;
&lt;h2&gt;&lt;a class="reference external" href="https://conferences.oreilly.com/oscon/oscon-or/public/schedule/detail/67276"&gt;TL;DR: NIST Container Security Standards&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Elsie Philips and Paul Burt&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A brief overview of the NIST container security standards, or how to
keep your containers secure. I'll admit I didn't get much new
information from this talk, but it was great to see a friend from
university and some entertaining memes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="building-your-own-cryptocurrency"&gt;
&lt;h2&gt;&lt;a class="reference external" href="https://conferences.oreilly.com/oscon/oscon-or/public/schedule/detail/67766"&gt;Building Your Own Cryptocurrency&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;John Feminella&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This talk was &lt;em&gt;amazing&lt;/em&gt;. Feminella talked about how &amp;quot;real&amp;quot; currency
(dollars and euros) work, and what features of those currencies
cryptocurrencies will need to have in order to succeed. I'd consider
myself financially literate in a practical sense, but I never learned
about fiat currency or thought about what gives money value. It's
always been an &amp;quot;it just is&amp;quot; kind of thing for me. It was awesome to
step back and think about money as having features, and what those
features might look like for cryptos. I don't invest very much in
cryptos, but it was also a very sobering reality check amongst a lot
of hype. Highly recommend giving this a watch if you're interested in
how money works or how viable cryptos are!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="day-2-keynotes"&gt;
&lt;h2&gt;Day 2 Keynotes&lt;/h2&gt;
&lt;div class="section" id="o-reilly-radar-open-source-tool-trends"&gt;
&lt;h3&gt;&lt;a class="reference external" href="https://conferences.oreilly.com/oscon/oscon-or/public/schedule/detail/71443"&gt;O'Reilly Radar: Open Source Tool Trends&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Roger Magoulas&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;An interesting dive into search term data on the O'Reilly website (I
think Safari specifically). I don't think there were any great
surprises:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python, Java, and Javascript are the most popular languages&lt;/li&gt;
&lt;li&gt;Kubernetes, Go, and Blockchain are gaining popularity&lt;/li&gt;
&lt;li&gt;Rust has stagnated, at least in number of people searching for it&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All interesting affirmations in data of things we already knew.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="coding-a-blockchain"&gt;
&lt;h2&gt;&lt;a class="reference external" href="https://conferences.oreilly.com/oscon/oscon-or/public/schedule/detail/66678"&gt;Coding a Blockchain&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Josh Butikofer&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;One of the tracks this year was 'Live Coding', and I was admittedly
skeptical going in. I wasn't sure how interesting it would be to watch
someone code, or how deep you could go writing code in 40 minutes. It
turns out it's an &lt;em&gt;awesome&lt;/em&gt; format (also Josh is super good at it!).
Live coding was a perfect middle ground between reading code (which
results in little absorption of the material) and trying to write code
yourself (which requires a much bigger time investment and can be
confusing and frustrating). Having a relative expert walk you through
what they were writing, why, and then &lt;em&gt;seeing it in code&lt;/em&gt; was super
helpful for solidifying my understanding of blockchains. While this
talk was a direct subset of topics I covered in my own talk, I found
watching someone write it live valuable. Highly recommend this talk as
well!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="istio-weaving-securing-and-observing-your-microservices"&gt;
&lt;h2&gt;&lt;a class="reference external" href="https://conferences.oreilly.com/oscon/oscon-or/public/schedule/detail/66984"&gt;Istio: Weaving, Securing, and Observing Your Microservices&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Daniel Berg&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I first heard about Istio at &lt;a class="reference external" href="https://www.devopsdays.org/events/2018-portland/welcome/"&gt;DevOps Days PDX&lt;/a&gt; last year, and didn't
understand it at all. While I've had it explained a few times since,
this talk was a real 'Aha' moment for me. Berg clearly explains, with
great visuals and simple language, what Istio is, what it can be used
for, and gives us a tour of it's features. As a member of the devops
community (if not a devops engineer) it will be so helpful to have a
basic understanding of Istio going forward. Not the most riveting
talk, but definitely one I got a lot out of.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="grpc-vs-rest"&gt;
&lt;h2&gt;&lt;a class="reference external" href="https://conferences.oreilly.com/oscon/oscon-or/public/schedule/detail/66328"&gt;GRPC vs. REST&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Alex Borysov and Mykyta Protsenko&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Possibly the most entertaining talk of OSCON 2018, this talk discussed
the differences between REST and gRPC for API construction. I learned
that gRPC is an actual library as opposed to an architectural pattern,
and that it's ideal for performant, asynchronous APIs. A great
deep-dive that I'd like to re-watch once it's out, as in-person I was
pretty mentally exhausted by that point :)&lt;/p&gt;
&lt;/div&gt;
</content><category term="tech"></category><category term="conferences"></category></entry><entry><title>RFID (mis)Adventure</title><link href="http://blog.lucywyman.me/RFID-adventure.html" rel="alternate"></link><published>2018-05-22T00:00:00-07:00</published><updated>2018-05-22T00:00:00-07:00</updated><author><name>Lucy Wyman</name></author><id>tag:blog.lucywyman.me,2018-05-22:/RFID-adventure.html</id><summary type="html">&lt;p&gt;Our office recently relocated to a WeWork, which has an RFID card for
getting onto the floor before business hours and for getting into our
company's suite there. Unfortunately I already have an RFID card (my
&lt;a class="reference external" href="https://kingcounty.gov/depts/transportation/metro/fares-orca/orca-cards.aspx"&gt;Orca card&lt;/a&gt;) attached to my phone, so keeping the WeWork card there
was a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Our office recently relocated to a WeWork, which has an RFID card for
getting onto the floor before business hours and for getting into our
company's suite there. Unfortunately I already have an RFID card (my
&lt;a class="reference external" href="https://kingcounty.gov/depts/transportation/metro/fares-orca/orca-cards.aspx"&gt;Orca card&lt;/a&gt;) attached to my phone, so keeping the WeWork card there
was a no-go. Keeping it in my wallet is also an option, but I don't
typically carry my wallet with me around the office, especially since
I have a limited number of outfits that have pockets. The ideal
solution for my RFID card woes would be something I could wear on my
body, that didn't need to be carried and could easily be passed by the
readers while I was juggling a water bottle and laptop. Something
like...a bracelet! So I set out to copy my WeWork RFID onto an RFID
bracelet. Long story short: I failed, I think because the super-cheap
RFID reader/writer I bought was &lt;em&gt;too&lt;/em&gt; cheap. But I wanted to blog
about it anyway in an effort to &lt;a class="reference external" href="http://time.com/3206754/publication-bias-null-results/"&gt;write about my failures as well as my
successes&lt;/a&gt;. For science!&lt;/p&gt;
&lt;div class="section" id="the-windows-vm"&gt;
&lt;h2&gt;The Windows VM&lt;/h2&gt;
&lt;p&gt;I started out by purchasing the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.amazon.com/125KHZ-Reader-Writer-Duplicator-Control/dp/B079HVQXQY/ref=sr_1_4?ie=UTF8&amp;amp;qid=1526008775&amp;amp;sr=8-4&amp;amp;keywords=rfid+writer#customerReviews"&gt;RFID reader/writer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.amazon.com/YARONGTECH-13-56MHZ-ISO14443A-Silicone-wristband/dp/B01FR63GVG/ref=sr_1_5?ie=UTF8&amp;amp;qid=1526008799&amp;amp;sr=8-5&amp;amp;keywords=rfid+bracelet#customerReviews"&gt;RFID Bracelets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After spending about an hour researching Linux utilities for RFID
readers/writers, I decided I should just use the software on the CD
that came with the copier. It was a .exe of course, so the first order
of business was spinning up a windows VM on my machine. The first snag
I hit was that the CD could only be installed on 32-bit Windows, not
64-bit, so after getting my 64-bit &lt;a class="reference external" href="http://aka.ms/ie11.win81.vagrant"&gt;Windows 8.1 VM&lt;/a&gt; setup I had to
tear it down and find a vagrant box for &lt;a class="reference external" href="https://app.vagrantup.com/mrh1997/boxes/vanilla-win7-32bit"&gt;32-bit Windows&lt;/a&gt;. 'Snag'
might be a strong word there, it was mostly just annoying and time
consuming. This is &lt;a class="reference external" href="https://gist.github.com/lucywyman/373c7a4352bb207bc41d57eb774e66fe"&gt;the Vagrantfile&lt;/a&gt; I ended up using. Important to
note that in addition to the particular Windows VM, I also needed to
mount the copier device to the VM.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-copier"&gt;
&lt;h2&gt;The Copier&lt;/h2&gt;
&lt;p&gt;With the software installed, and the correct device mounted so I could
connect the copier to the Windows VM, it was time to copy RFIDs! Or so
I thought. The copier beeped when I plugged it in, and successfully
connected to the GUI. Yay! I put my WeWork card on it and clicked
'Read'. It turned red and made angry beeping noises. Boo. I collected
a few other RFIDs I had around the house -- my Orca card, the badge
from our Portland office, my passport -- and tried those as well, all
without success. Maybe I was doing it wrong? The copier came with some
blank RFID tags, so I put one on the copier and wrote random data to
it. It beeped successfully and turned green. Sigh.&lt;/p&gt;
&lt;p&gt;That's really all there was to it. My copier seemed to be working, but
didn't have the right frequencies for the things I actually needed to
read. Forgetting / losing my WeWork card continues to be a problem, so
stayed tuned for other attempts at the bracelet solution or other
creative solutions to the problem!&lt;/p&gt;
&lt;/div&gt;
</content><category term="tech"></category><category term="experiences"></category></entry><entry><title>Managing CoreOS With Puppet</title><link href="http://blog.lucywyman.me/managing-coreos-with-puppet.html" rel="alternate"></link><published>2017-10-03T00:00:00-07:00</published><updated>2017-10-03T00:00:00-07:00</updated><author><name>Lucy Wyman</name></author><id>tag:blog.lucywyman.me,2017-10-03:/managing-coreos-with-puppet.html</id><summary type="html">&lt;div class="section" id="why"&gt;
&lt;h2&gt;Why&lt;/h2&gt;
&lt;p&gt;To be perfectly honest, the only reason I wanted to do this is because I
submitted a talk to &lt;a class="reference external" href="https://puppet.com/puppetconf"&gt;PuppetConf&lt;/a&gt; on the subject and it got accepted. Woops.
Way to go past Lucy.&lt;/p&gt;
&lt;p&gt;There are a few cases where managing CoreOS with Puppet makes sense though.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how"&gt;
&lt;h2&gt;How&lt;/h2&gt;
&lt;p&gt;Here's the …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="why"&gt;
&lt;h2&gt;Why&lt;/h2&gt;
&lt;p&gt;To be perfectly honest, the only reason I wanted to do this is because I
submitted a talk to &lt;a class="reference external" href="https://puppet.com/puppetconf"&gt;PuppetConf&lt;/a&gt; on the subject and it got accepted. Woops.
Way to go past Lucy.&lt;/p&gt;
&lt;p&gt;There are a few cases where managing CoreOS with Puppet makes sense though.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how"&gt;
&lt;h2&gt;How&lt;/h2&gt;
&lt;p&gt;Here's the basic steps we'll be taking to set up a puppet agent running on
CoreOS, all running in Vagrant (because I'm too cheap to buy cloud space for
this).&lt;/p&gt;
&lt;div class="section" id="stand-up-puppet-master-and-agent"&gt;
&lt;h3&gt;Stand Up Puppet Master and Agent&lt;/h3&gt;
&lt;p&gt;The first thing I wanted to do was get some basic Puppet infrastructure up that
I could integrate my CoreOS nodes into. I used the following Vagrantfile and
provisioning scripts to get my VMs running.&lt;/p&gt;
&lt;p&gt;I also installed the &lt;a class="reference external" href="https://github.com/oscar-stack/vagrant-hosts"&gt;vagrant-hosts&lt;/a&gt; plugin to make sure the VMs could talk to
each other, and minimize the amount of networking voodoo I had to do:
&lt;code&gt;vagrant plugin install vagrant-hosts&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ tree
.
├── puppet-agent-install.sh
├── puppet-master-install.sh
└── Vagrantfile
&lt;/pre&gt;
&lt;div class="section" id="vagrantfile"&gt;
&lt;h4&gt;Vagrantfile&lt;/h4&gt;
&lt;p&gt;Configuration file for the virtual machines we'll install puppet master and agents on&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="no"&gt;Vagrant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;puppetmaster&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ubuntu/xenial64&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;puppet-master&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt; &lt;span class="ss"&gt;:&amp;quot;private_network&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;10.20.1.80&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;provision&lt;/span&gt; &lt;span class="ss"&gt;:hosts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:sync_hosts&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;provision&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;shell&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;puppet-master-install.sh&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;provider&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;virtualbox&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;vb&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;vb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customize&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;modifyvm&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--memory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;4096&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;puppetagent&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;centos/7&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;puppet-agent&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt; &lt;span class="ss"&gt;:&amp;quot;private_network&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;10.20.1.81&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;provision&lt;/span&gt; &lt;span class="ss"&gt;:hosts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:sync_hosts&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;provision&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;shell&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;puppet-agent-install.sh&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="puppet-master-install-sh"&gt;
&lt;h4&gt;puppet-master-install.sh&lt;/h4&gt;
&lt;p&gt;Provisioning script for the vagrant VM with puppet master on it&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="ch"&gt;#!/bin/bash
&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; ps aux &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;puppet&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep -v grep &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt; /dev/null
&lt;span class="k"&gt;then&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Puppet Master is already installed. Exiting...&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="c1"&gt;# Install puppet master
&lt;/span&gt;  wget https://apt.puppetlabs.com/puppetlabs-release-pc1-xenial.deb
  sudo dpkg -i puppetlabs-release-pc1-xenial.deb
  sudo apt-get -yq update
  sudo apt-get -yq install puppetserver
  &lt;span class="c1"&gt;#sudo apt-get -yq install puppet
&lt;/span&gt;  sudo service puppetserver start

  &lt;span class="c1"&gt;# Configure /etc/hosts file
&lt;/span&gt;  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;# Host config for Puppet Master and Agent Nodes
  192.168.33.10   puppet-master puppet-master
  192.168.33.11   puppet-agent puppet-agent&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts

  &lt;span class="c1"&gt;# Add optional alternate DNS names to /etc/puppet/puppet.conf
&lt;/span&gt;  sudo &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;
  [main]
  dns_alt_names = puppet,puppet-master&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/puppetlabs/puppet/puppet.conf
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="puppet-agent-install-sh"&gt;
&lt;h4&gt;puppet-agent-install.sh&lt;/h4&gt;
&lt;p&gt;Provisioning script for the vagrant VM with puppet agent on it&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="ch"&gt;#!/bin/bash
&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; ps aux &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;puppet&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep -v grep &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt; /dev/null
&lt;span class="k"&gt;then&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Puppet Agent is already installed. Moving on...&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="c1"&gt;# Install puppet agent
&lt;/span&gt;  sudo rpm -Uvh https://yum.puppetlabs.com/puppetlabs-release-pc1-el-7.noarch.rpm
  sudo yum install -y puppet-agent
  sudo /opt/puppetlabs/bin/puppet resource service puppet &lt;span class="nv"&gt;ensure&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;running &lt;span class="nv"&gt;enable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;

  &lt;span class="c1"&gt;# Configure /etc/hosts file
&lt;/span&gt;  sudo &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;# Host config for Puppet Master and Agent Nodes
  192.168.33.10   puppet-master puppet-master
  192.168.33.11   puppet-agent puppet-agent&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts

  &lt;span class="c1"&gt;# Add optional alternate DNS names to /etc/puppet/puppet.conf
&lt;/span&gt;  sudo &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[agent]
  server=puppet-master&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/puppetlabs/puppet/puppet.conf

  sudo /opt/puppetlabs/bin/puppet agent --enable
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Once everything is in place, we'll start up the VMs:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
vagrant up
&lt;/pre&gt;
&lt;p&gt;And run puppet on the agent and master&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
vagrant ssh puppetagent
sudo su -
puppet agent -t
exit &amp;amp;&amp;amp; exit
vagrant ssh puppetmaster
sudo su -
puppet agent -t
puppet cert list --all
puppet cert sign --all
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="create-coreos-agent-node"&gt;
&lt;h3&gt;Create CoreOS Agent Node&lt;/h3&gt;
&lt;p&gt;The next step is to integrate a &lt;a class="reference external" href="https://coreos.com/"&gt;CoreOS&lt;/a&gt; node running &lt;a class="reference external" href="https://docs.puppet.com/puppet/latest/about_agent.html"&gt;puppet agent&lt;/a&gt; in a
container into our puppet infrastructure. This involves a lot of changes, so
let's break it down:&lt;/p&gt;
&lt;p&gt;Add the following block to your Vagrantfile in the 'config' block&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;coreosagent&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
  &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forward_agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;coreos-beta&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;box_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://storage.googleapis.com/beta.release.core-os.net/amd64-usr/current/coreos_production_vagrant.json&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;coreos-agent&amp;quot;&lt;/span&gt;

  &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;provider&lt;/span&gt; &lt;span class="ss"&gt;:virtualbox&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="c1"&gt;# On VirtualBox, we don't have guest additions or functional vboxsf&lt;/span&gt;
    &lt;span class="c1"&gt;# in CoreOS, so tell Vagrant that so it can be smarter.&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_guest_additions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;functional_vboxsf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2048&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customize&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;modifyvm&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--cpuexecutioncap&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;100&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt; &lt;span class="ss"&gt;:private_network&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;10.20.1.82&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;provision&lt;/span&gt; &lt;span class="ss"&gt;:hosts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:sync_hosts&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exist?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;CLOUD_CONFIG_PATH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;provision&lt;/span&gt; &lt;span class="ss"&gt;:file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:source&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;CLOUD_CONFIG_PATH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:destination&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/tmp/vagrantfile-user-data&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;provision&lt;/span&gt; &lt;span class="ss"&gt;:shell&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:inline&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:privileged&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;You'll also need the following in a file called &lt;code&gt;config.rb&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="c1"&gt;#Size of the CoreOS cluster created by Vagrant&lt;/span&gt;
&lt;span class="vg"&gt;$num_instances&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="c1"&gt;# Used to fetch a new discovery token for a cluster of size $num_instances&lt;/span&gt;
&lt;span class="vg"&gt;$new_discovery_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://discovery.etcd.io/new?size=&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vg"&gt;$num_instances&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# Official CoreOS channel from which updates should be downloaded&lt;/span&gt;
&lt;span class="vg"&gt;$update_channel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'beta'&lt;/span&gt;

&lt;span class="c1"&gt;# Automatically replace the discovery token on 'vagrant up'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'user-data'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;eql?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'up'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'open-uri'&lt;/span&gt;
  &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'yaml'&lt;/span&gt;

  &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$new_discovery_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;

  &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;YAML&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'user-data'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key?&lt;/span&gt; &lt;span class="s1"&gt;'coreos'&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'coreos'&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;key?&lt;/span&gt; &lt;span class="s1"&gt;'etcd'&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'coreos'&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'etcd'&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'discovery'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key?&lt;/span&gt; &lt;span class="s1"&gt;'coreos'&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'coreos'&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;key?&lt;/span&gt; &lt;span class="s1"&gt;'etcd2'&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'coreos'&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'etcd2'&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'discovery'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# Fix for YAML.load() converting reboot-strategy from 'off' to `false`&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key?&lt;/span&gt; &lt;span class="s1"&gt;'coreos'&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'coreos'&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;key?&lt;/span&gt; &lt;span class="s1"&gt;'update'&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'coreos'&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'update'&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;key?&lt;/span&gt; &lt;span class="s1"&gt;'reboot-strategy'&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'coreos'&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'update'&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'reboot-strategy'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
      &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'coreos'&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'update'&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'reboot-strategy'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'off'&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;yaml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;YAML&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'user-data'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#cloud-config&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And lastly add a &lt;code&gt;user-data&lt;/code&gt; file (your cloud-config file)&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
#cloud-config

hostname: coreos-agent

coreos:
  units:
  - name: puppet.service
    command: start
    content: |
      [Unit]
      Description=Puppet
      After=docker.service
      Requires=docker.service

      [Service]
      TimeoutStartSec=0
      ExecStartPre=-/usr/bin/docker kill puppet1
      ExecStartPre=-/usr/bin/docker rm puppet1
      ExecStartPre=/usr/bin/docker pull puppet/puppet-agent

      [Install]
      WantedBy=multi-user.target

  - name: 00-ens192.network
    runtime: true
    content: |
      [Match]
      Name=ens192

      [Network]
      DNS=10.20.1.82
      Domains=coreos-agent
      Address=10.20.1.82
      Gateway=10.0.2.2
&lt;/pre&gt;
&lt;p&gt;Now we'll get that machine up and running:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
vagrant up
vagrant ssh coreosagent
&lt;/pre&gt;
&lt;p&gt;And wham, you're in a coreos machine!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="connecting-agent-to-master"&gt;
&lt;h3&gt;Connecting Agent to Master&lt;/h3&gt;
&lt;p&gt;The only thing left to do is start our puppet agent container on the CoreOS VM and get it connected to the master.&lt;/p&gt;
&lt;div class="section" id="add-puppet-conf-to-agent"&gt;
&lt;h4&gt;Add puppet.conf to agent&lt;/h4&gt;
&lt;p&gt;Since our CoreOS machine doesn't know it's a puppet agent yet (or about puppet at all), we need to manually add &lt;code&gt;/etc/puppetlabs/puppet/puppet.conf&lt;/code&gt; to configure the agent that will run in a docker container.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="test-it-out"&gt;
&lt;h2&gt;Test It Out&lt;/h2&gt;
&lt;p&gt;Ok, let's make sure our setup is actually working!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.admintome.com/blog/configure-puppet-on-coreos/"&gt;http://www.admintome.com/blog/configure-puppet-on-coreos/&lt;/a&gt;
&lt;a class="reference external" href="https://coreos.com/os/docs/latest/booting-on-vagrant.html#cloud-config"&gt;https://coreos.com/os/docs/latest/booting-on-vagrant.html#cloud-config&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="tech"></category><category term="containers"></category></entry><entry><title>Installing a Package in an Openshift Container (Kind Of)</title><link href="http://blog.lucywyman.me/installing-a-package-in-an-openshift-container.html" rel="alternate"></link><published>2017-07-25T00:00:00-07:00</published><updated>2017-07-25T00:00:00-07:00</updated><author><name>Lucy Wyman</name></author><id>tag:blog.lucywyman.me,2017-07-25:/installing-a-package-in-an-openshift-container.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;TODO Better title. Ping me with ideas!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Fair warning: This article assumes that you have a decent
understanding of Openshift from the outset, because explaining all the
concepts used here would take too much space. I'll try to link to
resources where applicable though, so that words don't go undefined …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;TODO Better title. Ping me with ideas!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Fair warning: This article assumes that you have a decent
understanding of Openshift from the outset, because explaining all the
concepts used here would take too much space. I'll try to link to
resources where applicable though, so that words don't go undefined.&lt;/p&gt;
&lt;p&gt;The typical happy path for using &lt;a class="reference external" href="http://docs.openshift.org/"&gt;Openshift&lt;/a&gt; is to use it's &lt;a class="reference external" href="https://docs.openshift.org/latest/architecture/core_concepts/builds_and_image_streams.html#source-build"&gt;Source
to Image (s2i)&lt;/a&gt; builder to take a &lt;a class="reference external" href="https://docs.openshift.com/enterprise/3.2/dev_guide/builds.html#source-code"&gt;git repo&lt;/a&gt; or &lt;a class="reference external" href="https://docs.openshift.com/enterprise/3.2/dev_guide/builds.html#dockerfile-source"&gt;dockerfile&lt;/a&gt; and
turn it into a container running on Openshift. In general, this works
just fine. The s2i builder &lt;a class="reference external" href="https://docs.Openshift.com/enterprise/3.1/dev_guide/new_app.html#language-detection"&gt;detects which language your app is using&lt;/a&gt;
and deploys that application appropriately, including starting the
webserver. However, if your project needs more dependencies than
Openshift expects, it's very difficult to add those dependencies to
the container. For good reason, your user in the container is pretty
neutered, which means installing a package is impossible.  And you
don't have access to the processes that are installing dependencies
for your application, since those come from the default (probably
CentOS or RHEL) base image that Openshift uses. So, what do you need
if you need to install a package in your container? We'll explain!&lt;/p&gt;
&lt;p&gt;In short, you'll need to:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Copy the s2i builder that your application is using (based on it's language)&lt;/li&gt;
&lt;li&gt;Modify it as necessary for your application&lt;/li&gt;
&lt;li&gt;Create a new application in Openshift that uses your Dockerfile to create an image&lt;/li&gt;
&lt;li&gt;Create your &amp;quot;real&amp;quot; application in Openshift, using the image you just created as a base and the Source strategy&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We'll go through it step by step!&lt;/p&gt;
&lt;div class="section" id="copy-the-default-s2i-builder"&gt;
&lt;h2&gt;Copy the Default S2I Builder&lt;/h2&gt;
&lt;p&gt;The best way to find the s2i builder your application will need is to
reference the &lt;a class="reference external" href="https://docs.Openshift.org/latest/using_images/s2i_images/ruby.html"&gt;Openshift S2I documentation&lt;/a&gt;, find the language your
application is in, and then in the first paragraph there should be a
link to the git repo where the default s2i builder for that language
lives.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="" src="static/Openshift-s2i-docs.png" /&gt;
&lt;/div&gt;
&lt;p&gt;Searching for 'Openshift $LANG S2I builder'
also usually resulted in the first hit being the &amp;quot;official&amp;quot; s2i
builder, but the git repos don't make that clear so going through the
documentation should give you a little more certainty you found the
right one.&lt;/p&gt;
&lt;p&gt;I personally cloned the whole repo, then copied the relevant files into a
subdirectory of my application so that everything I needed was
packaged together. Later on, this will make things a little easier. If you'd rather separate your concerns though, you
can also fork + download + modify the s2i builder and keep it separate
from your application.&lt;/p&gt;
&lt;p&gt;Here's what my application directory ended up looking like, where everything
under &lt;code&gt;openshift-build&lt;/code&gt; is copied from the &lt;a class="reference external" href="https://github.com/sclorg/s2i-ruby-container/"&gt;Openshift ruby s2i&lt;/a&gt; repo.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
.
├── app.rb
├── config.ru
├── Gemfile
├── helpers
│&amp;nbsp;&amp;nbsp; └── helpers.rb
├── openshift-build
│&amp;nbsp;&amp;nbsp; ├── cccp.yml
│&amp;nbsp;&amp;nbsp; ├── Dockerfile
│&amp;nbsp;&amp;nbsp; ├── root
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── opt
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;     └── app-root
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;         └── etc
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;             ├── generate_container_user
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;             ├── puma.cfg
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;             └── scl_enable
│&amp;nbsp;&amp;nbsp; ├── s2i
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── bin
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;     ├── assemble
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;     ├── run
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;     └── usage
│&amp;nbsp;&amp;nbsp; └── test
│&amp;nbsp;&amp;nbsp;     ├── puma-test-app
│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; ├── app.rb
│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; ├── config.ru
│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; ├── Gemfile
│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; └── Gemfile.lock
│&amp;nbsp;&amp;nbsp;     ├── rack-test-app
│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; ├── app.rb
│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; ├── config.ru
│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; ├── Gemfile
│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; └── Gemfile.lock
│&amp;nbsp;&amp;nbsp;     └── run
├── public
│&amp;nbsp;&amp;nbsp; └── images
│&amp;nbsp;&amp;nbsp;     └── approval.gif
├── README.md
├── spec
│&amp;nbsp;&amp;nbsp; └── kukla
│&amp;nbsp;&amp;nbsp;     ├── helper_spec.rb
│&amp;nbsp;&amp;nbsp;     └── kukla_spec.rb
└── views
    └── index.erb
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Key to Success&lt;/strong&gt;: Make sure you include everything in the &lt;code&gt;s2i&lt;/code&gt; and
&lt;code&gt;root&lt;/code&gt; directories from the default s2i builder! These files are
necessary for building your first image later on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="modify-as-necessary"&gt;
&lt;h2&gt;Modify As Necessary&lt;/h2&gt;
&lt;p&gt;I was trying to trick Git into thinking I had a user on Openshift, so
that I could clone some dependencies for my application. I also needed
&lt;a class="reference external" href="https://www.npmjs.com/"&gt;npm&lt;/a&gt; for Reasons. I looked at the &lt;a class="reference external" href="https://github.com/sclorg/s2i-nodejs-container"&gt;nodejs s2i builder&lt;/a&gt;, which uses
&lt;a class="reference external" href="https://cwrap.org/nss_wrapper.html"&gt;nss_wrapper&lt;/a&gt; to achieve the Git-trick, and just copy-pasted the
important bits (apologies that the application isn't open source so I
can just reference it):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;     INSTALL_PKGS=&amp;quot;rh-ruby24 rh-ruby24-ruby-devel rh-ruby24-rubygem-rake rh-ruby24-rubygem-bundler rh-nodejs6 rh-nodejs6-npm nss_wrapper&amp;quot; &amp;amp;&amp;amp; \
---
&amp;gt;     INSTALL_PKGS=&amp;quot;rh-ruby24 rh-ruby24-ruby-devel rh-ruby24-rubygem-rake rh-ruby24-rubygem-bundler rh-nodejs6&amp;quot; &amp;amp;&amp;amp; \
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I also added &lt;a class="reference external" href="https://github.com/sclorg/s2i-nodejs-container/blob/master/4/root/opt/app-root/etc/generate_container_user"&gt;this file&lt;/a&gt; from the nodejs builder to &lt;code&gt;$APP_ROOT/openshift-build/root/opt/app-root/etc&lt;/code&gt; so that my application could use nss_wrapper.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create-application-from-dockerfile"&gt;
&lt;h2&gt;Create Application from Dockerfile&lt;/h2&gt;
&lt;p&gt;The next step is to create an image in the &lt;a class="reference external" href="https://docs.openshift.com/container-platform/3.3/dev_guide/managing_images.html#accessing-the-internal-registry"&gt;Openshift internal
repository&lt;/a&gt; from our special S2I build. This will be the base
image for our application, instead of the default Openshift builder
image. I personally found this a little bit easier to do in the UI
than on the CLI, but will explain both.&lt;/p&gt;
&lt;p&gt;The key when you create this application is to use the &lt;a class="reference external" href="https://docs.openshift.com/enterprise/3.2/dev_guide/builds.html#docker-strategy-options"&gt;Docker source
strategy&lt;/a&gt; using the Dockerfile (and all the other files!) you copied
from the default s2i builder. This is where it comes in handy to have
those files inside your application: if you point Openshift to where
those files are (&lt;code&gt;spec.strategy.dockerStrategy.dockerfilePath&lt;/code&gt;
in the buildConfig), Openshift will use that for it's Docker build
strategy. As I describe in &lt;a class="reference external" href="http://blog.lucywyman.me/deploy-private-git-repo-to-openshift.html"&gt;this blog post&lt;/a&gt;, it's difficult to create
a new application using your own buildConfig. I didn't feel like
messing with templates at this point, so I just:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Created an application using the default image for ruby&lt;/li&gt;
&lt;li&gt;Edited the buildConfig&lt;/li&gt;
&lt;li&gt;Rebuilt the application.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's how it went down:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I recommend naming this first application 'myapp-builder',
or something along those lines.&lt;/p&gt;
&lt;div class="section" id="in-the-cli"&gt;
&lt;h3&gt;In the CLI&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Run &lt;code&gt;oc new-app &amp;lt;appropriate configurations&amp;gt;&lt;/code&gt;. As previously mentioned, Openshift will detect the language your application is in and use that default image. I highly recommend running &lt;code&gt;oc new-app --help&lt;/code&gt; to see if there are any other options you'd like to use!&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;oc edit bc/myapp-builder&lt;/code&gt; and modify the strategy section of the buildConfig to have the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code literal-block"&gt;
strategy:
  type: Docker
  dockerStrategy:
    dockerfilePath: openshift-build/Dockerfile
    env:
      - name: MYVAR
        value: my_value
&lt;/pre&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;Close and save the buildconfig.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;oc start-build myapp-builder&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="in-the-ui"&gt;
&lt;h3&gt;In the UI&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Note: I believe the UI workflow only works if your file source is Github, not a Docker image&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Click 'Add to Project' in the header navigation&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="figure"&gt;
&lt;img alt="" src="static/add-project.png" /&gt;
&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Select the language (and version, etc.) your app is in&lt;/li&gt;
&lt;li&gt;Fill out the application details appropriately. There's nothing special you need to do on this page.&lt;/li&gt;
&lt;li&gt;Now that you've created your application, go to 'Builds -&amp;gt; Builds' in the left navigation&lt;/li&gt;
&lt;li&gt;Select the application you just created&lt;/li&gt;
&lt;li&gt;In the top right, select 'Actions -&amp;gt; Edit Yaml'&lt;/li&gt;
&lt;li&gt;Modify your buildConfig to use the Docker source strategy. The key changes here are under the &lt;code&gt;strategy&lt;/code&gt; section. You should end up with something that looks like this:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code literal-block"&gt;
strategy:
  type: Docker
  dockerStrategy:
    dockerfilePath: openshift-build/Dockerfile
    env:
      - name: MYVAR
        value: my_value
&lt;/pre&gt;
&lt;p&gt;Then save the config
8. In the top-right corner, click 'Start Build'&lt;/p&gt;
&lt;p&gt;And you're done! The resulting image will be published to the internal container registry with the label 'app-name:latest'.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="create-application-from-source-using-image"&gt;
&lt;h2&gt;Create Application from Source, Using Image&lt;/h2&gt;
&lt;p&gt;The final step, creating our application image from the image we just
created! The key when creating this application is to use the &lt;a class="reference external" href="https://docs.openshift.com/enterprise/3.2/dev_guide/builds.html#source-to-image-strategy-options"&gt;source
strategy&lt;/a&gt; with &lt;strong&gt;your image&lt;/strong&gt; as the
&lt;code&gt;source.strategy.sourceStrategy.name&lt;/code&gt; value. This should be the
name of the application you just created. The steps for creating this
application are more or less the same as they were in the previous
step:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Create an application using the default image in your language&lt;/li&gt;
&lt;li&gt;Edit the buildConfig&lt;/li&gt;
&lt;li&gt;Rebuild the application&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can follow the same steps enumerated above for the preferred
interface, and here's roughly what your buildConfig should look like
when you're finished:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
strategy:
  sourceStrategy:
    env:
    - name: MYVAR
      value: my_value
    from:
      kind: ImageStreamTag
      name: myapp-builder:latest
&lt;/pre&gt;
&lt;p&gt;That last line being the critical point! Make sure you're referencing your builder image.&lt;/p&gt;
&lt;p&gt;And there you have it! Once you've rebuilt your application, you're
all set.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="making-changes"&gt;
&lt;h2&gt;Making Changes&lt;/h2&gt;
&lt;p&gt;If you make changes to &lt;em&gt;your application&lt;/em&gt;, you only need to rebuild
the application, not the application builder. However, if you make
changes to your Dockerfile or any other part of the underlying image
(say you need another package installed), then you will need to
rebuild the app-builder image &lt;em&gt;and&lt;/em&gt; your application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Openshift is in an interesting place developmentally, where they have
pretty good documentation, relatively mature technology, and awesome
tech support on IRC, but almost no community documentation (think blog
posts, stack overflow questions, etc.). I would often find myself
reading a post from the Openshift blog that was published in 2013, and
hope it was still relevant, or be looking through github issues and
irc logs for answers. But, there were still a number of resources I
found very helpful through this journey:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;First, I &lt;em&gt;highly&lt;/em&gt; recommend asking any questions in #openshift
(irc.freenode.net). Folks were kind, quick to respond, super
helpful.&lt;/li&gt;
&lt;li&gt;The &lt;a class="reference external" href="https://www.openshift.com/promotions/for-developers.html"&gt;Openshift book&lt;/a&gt; is a great resource if you have the time. I would suggest only reading the first 1/3 of it or so to understand core concepts, then starting your own project.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.openshift.com/enterprise/3.2/dev_guide/builds.html"&gt;This doc&lt;/a&gt; is the best &amp;quot;Everything you need to know about Openshift builds&amp;quot; documentation&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.openshift.com/create-s2i-builder-image/"&gt;This&lt;/a&gt; is a
pretty good resource on the anatomy of an s2i builder, though
definitely isn't required reading for this post.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="tech"></category><category term="Openshift"></category></entry><entry><title>How to Deploy a Private Git Repo to Openshift</title><link href="http://blog.lucywyman.me/deploy-private-git-repo-to-openshift.html" rel="alternate"></link><published>2017-06-15T00:00:00-07:00</published><updated>2017-06-15T00:00:00-07:00</updated><author><name>Lucy Wyman</name></author><id>tag:blog.lucywyman.me,2017-06-15:/deploy-private-git-repo-to-openshift.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://openshift.com"&gt;Openshift&lt;/a&gt; is &lt;a class="reference external" href="http://www.redhat.com/en"&gt;Redhat's&lt;/a&gt; platform as a service, aka a place for you
to deploy your application to (think Heroku, Google App Engine, or AWS
Beanstalk). They have a tool called &lt;a class="reference external" href="https://docs.openshift.com/enterprise/3.1/architecture/core_concepts/builds_and_image_streams.html#source-build"&gt;Source 2 Image (S2I)&lt;/a&gt; that
allows you to pass in a &lt;a class="reference external" href="https://docs.openshift.org/latest/dev_guide/builds/index.html"&gt;source&lt;/a&gt; (in the form of a docker image, git …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://openshift.com"&gt;Openshift&lt;/a&gt; is &lt;a class="reference external" href="http://www.redhat.com/en"&gt;Redhat's&lt;/a&gt; platform as a service, aka a place for you
to deploy your application to (think Heroku, Google App Engine, or AWS
Beanstalk). They have a tool called &lt;a class="reference external" href="https://docs.openshift.com/enterprise/3.1/architecture/core_concepts/builds_and_image_streams.html#source-build"&gt;Source 2 Image (S2I)&lt;/a&gt; that
allows you to pass in a &lt;a class="reference external" href="https://docs.openshift.org/latest/dev_guide/builds/index.html"&gt;source&lt;/a&gt; (in the form of a docker image, git
repo, or binary) and then builds an Openshift docker image from that.
Because I'm using this as a project for work, and my application
already lives on &lt;a class="reference external" href="https://github.com"&gt;Github&lt;/a&gt;, I decided to use a private Git repo as my
source for deploying my application to Openshift. Deploying public Git
repos is &lt;a class="reference external" href="https://docs.openshift.org/latest/dev_guide/application_lifecycle/new_app.html#specifying-source-code"&gt;well-documented&lt;/a&gt;, and while private repos don't require too
much additional setup there were a few hiccups along the road, and no
great step-by-step resource. So...I decided to write my own!&lt;/p&gt;
&lt;div class="section" id="notes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Notes&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;This assumes that you already know &lt;a class="reference external" href="https://developers.openshift.com/"&gt;what Openshift is&lt;/a&gt;, and have some basic Git and web application knowledge. I essentially wrote what I wish I had read 2 days ago -- if there's any context you're missing I've tried to provide as many resources I think would be useful at the end of this article.&lt;/li&gt;
&lt;li&gt;This also assumes you're on Linux, and I am far too lazy to find how to do all of this on other systems. If these don't work on OSX or Windows, maybe you should consider a different operating system?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="overview"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Overview&lt;/a&gt;&lt;/h2&gt;
&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#notes" id="id2"&gt;Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#overview" id="id3"&gt;Overview&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#install-the-openshift-cli" id="id4"&gt;Install the Openshift CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#create-an-openshift-project" id="id5"&gt;Create an Openshift project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#pause" id="id6"&gt;Pause&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#create-an-ssh-key" id="id7"&gt;Create an SSH Key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#add-public-key-as-a-deploy-key-to-repo" id="id8"&gt;Add Public Key as a Deploy Key to Repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#add-key-as-a-secret-to-openshift" id="id9"&gt;Add Key as a Secret to Openshift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#create-openshift-application" id="id10"&gt;Create Openshift Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#make-sure-it-worked" id="id11"&gt;Make Sure It Worked&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#issues-i-ran-in-to" id="id12"&gt;Issues I Ran In To&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-wrong-git-uri" id="id13"&gt;The Wrong Git URI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#application-already-exists" id="id14"&gt;Application Already Exists&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#resources" id="id15"&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="install-the-openshift-cli"&gt;
&lt;h3&gt;&lt;a class="reference external" href="https://docs.openshift.org/latest/cli_reference/get_started_cli.html#cli-linux"&gt;Install the Openshift CLI&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Step 0 is to install the Openshift CLI. I generally find CLIs easier
to use + understand, but Openshift also has a nice GUI you can use
if you'd prefer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: this assumes that you already have access to and Openshift
instance.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/openshift/origin/releases#Downloads"&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Untar &lt;code&gt;tar -xvzf openshift-origin-client-tools-v1.5.1-7b451fc-linux-64bit.tar.gz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Move binary into path &lt;code&gt;mv openshift-origin-client-tools-v1.5.1-7b451fc-linux-64bit/oc /usr/local/bin&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you're not sure what's in your path, run &lt;code&gt;echo $PATH&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create-an-openshift-project"&gt;
&lt;h3&gt;Create an &lt;a class="reference external" href="https://docs.openshift.org/latest/dev_guide/projects.html"&gt;Openshift project&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is where our applications, builds, etc. will live. I highly
recommend running &lt;code&gt;oc new-project -h&lt;/code&gt; first to see if there are
any flags or arguments you want to pass in! I just ran &lt;code&gt;oc
new-project &amp;lt;project-name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pause"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;Pause&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Stop right here! Usually, the tutorials will tell you to make your
&lt;a class="reference external" href="https://developers.openshift.com/managing-your-applications/creating-applications.html"&gt;Openshift application&lt;/a&gt; next and pass in your Git URL. DON'T FALL FOR
IT. The problem is that for private repos, you need to have a deploy
key so Openshift can authenticate with the repo. However, the only way
to tell Openshift it needs the SSH key is in the &lt;a class="reference external" href="https://docs.openshift.org/latest/dev_guide/builds/index.html#defining-a-buildconfig"&gt;buildconfig&lt;/a&gt;. And
the buildconfig isn't generated until you either:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Try to create an application (the first build will fail then you can
modify the buildconfig) OR&lt;/li&gt;
&lt;li&gt;Have a template (basically write your own reusable buildconfig).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I ended up using a template, because it drove me nuts to have the
first build of the application fail. But you can see a &lt;a class="reference external" href="https://blog.openshift.com/using-ssh-key-for-s2i-builds/"&gt;step-by-step
guide for option 1 here&lt;/a&gt;
if you'd prefer to modify an existing buildconfig.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create-an-ssh-key"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Create an SSH Key&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Ok, so, adding a deploy key to both our Github and Openshift. First things
first, lets make a special key (Don't use your own personal SSH key!
Make a new one!)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ssh-keygen -t rsa -b 4096 -C &amp;quot;openshift-key&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Make sure you give it a unique path, so that it doesn't
overwrite any existing SSH key(s)!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="add-public-key-as-a-deploy-key-to-repo"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;Add Public Key as a Deploy Key to Repo&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now we'll add the public key to our private Git repo as a deploy key,
so that it can verify communications with Openshift. See Git's
slightly more helpful documentation on how to do this &lt;a class="reference external" href="https://developer.github.com/v3/guides/managing-deploy-keys/#deploy-keys"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Go to the repos main page in Github&lt;/li&gt;
&lt;li&gt;Click the 'Settings' tab&lt;/li&gt;
&lt;li&gt;Go to 'Deploy keys'&lt;/li&gt;
&lt;li&gt;Give it a name (can be anything)&lt;/li&gt;
&lt;li&gt;Paste the &lt;strong&gt;public&lt;/strong&gt; key (&lt;code&gt;~/.ssh/id_rsa-openshift.pub&lt;/code&gt;) into the textbox&lt;/li&gt;
&lt;li&gt;Click add key&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="add-key-as-a-secret-to-openshift"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;Add Key as a Secret to Openshift&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now we have to give Openshift the private key, and make it an
&lt;a class="reference external" href="https://docs.openshift.com/enterprise/3.0/dev_guide/secrets.html"&gt;Openshift secret&lt;/a&gt;. Openshift secrets &amp;quot;decouple sensitive content
from the pods that use it and can be mounted into containers using a
volume plug-in or used by the system to perform actions on behalf of a
pod&amp;quot;, which is very useful!  Creating them requires a few steps (read
more about why in &lt;a class="reference external" href="https://blog.openshift.com/deploying-from-private-git-repositories/"&gt;this poorly named blog post&lt;/a&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc secrets new-sshauth openshiftkey --ssh-privatekey=$HOME/.ssh/id_rsa-openshift
oc secrets add serviceaccount/builder secrets/openshiftkey
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you accidentally add the public key like I did, you can remove
secrets using &lt;code&gt;oc delete secret openshiftkey&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create-openshift-application"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id10"&gt;Create Openshift Application&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Ok, &lt;em&gt;now&lt;/em&gt; that our keys are all squared away, we can create an
application using a private git repo as our source! Unfortunately,
there's currently no way to use the &lt;code&gt;oc new-app&lt;/code&gt; command
directly to build an image from a private repo. What we'll do instead
is create an &lt;a class="reference external" href="https://docs.openshift.org/latest/dev_guide/templates.html"&gt;application template&lt;/a&gt; that includes the necessary
secret and use that template to create our app.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Create a template for our git repo using the new-app command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc new-app ssh://git@github.com:mygituser/mygitrepo --name app-name -o json &amp;gt;&amp;gt; my-template.json
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Open the JSON file and change &amp;quot;List&amp;quot; to &amp;quot;Template&amp;quot;, and &amp;quot;items&amp;quot; to &amp;quot;objects&amp;quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Add a &lt;code&gt;&amp;quot;name&amp;quot;: &amp;quot;my-app-name&amp;quot;&lt;/code&gt; to the &lt;code&gt;metadata&lt;/code&gt; object&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;metadata&amp;quot;: {&amp;quot;name&amp;quot;: &amp;quot;my-app-name&amp;quot;},
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;This part is tricky and I'm not sure how best to describe it, but in &lt;code&gt;&amp;quot;spec&amp;quot;: {&amp;quot;source&amp;quot;:{}}&lt;/code&gt; object add&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;sourceSecret&amp;quot;: {
    &amp;quot;name&amp;quot;: &amp;quot;openshiftkey&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So you should end up with a block that looks like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;spec&amp;quot;: {
...
    &amp;quot;source&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;Git&amp;quot;,
        &amp;quot;git&amp;quot;: {
            &amp;quot;uri&amp;quot;:&amp;quot;ssh://git@github.com/puppetlabs/pe-console-ui-code-coverage&amp;quot;
        },
        &amp;quot;sourceSecret&amp;quot;: { &amp;quot;name&amp;quot;: &amp;quot;openshiftkey&amp;quot; }
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://gist.github.com/lucywyman/145aebfe1897d91d4cd5337e5baa7379"&gt;This is what my JSON template ended up looking like&lt;/a&gt; (with sensitive
information removed)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Create a template based on this json file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc create -f my-template.json
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Finally, create an application using the template!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc new-app --template app-name
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Again, I highly recommend you run &lt;code&gt;oc new-app -h&lt;/code&gt; first to see if there are any special configurations you want to use.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="make-sure-it-worked"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;Make Sure It Worked&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Run &lt;code&gt;oc get builds&lt;/code&gt;, and you should see output similar to this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NAME      TYPE      FROM          STATUS     STARTED        DURATION
my-app1   Source    Git@abcdefg   Complete   18 hours ago   29s
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="issues-i-ran-in-to"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;Issues I Ran In To&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="the-wrong-git-uri"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id13"&gt;The Wrong Git URI&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At first I was using the http Git URI, which obviously didn't use
the SSH deploy key. I then tried using
&lt;code&gt;ssh://git&amp;#64;github.com:my-user/my-repo.git&lt;/code&gt;, which also failed.
&lt;code&gt;git&amp;#64;github.com:my-user/my-repo.git&lt;/code&gt; is the right URI!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="application-already-exists"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id14"&gt;Application Already Exists&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Because I had to try building my application several times, I also had
to delete my failed attempts several times so there wouldn't be name
errors. I usually ran the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc delete all --selector app=app-name
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should delete all resources for the app&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;Resources&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;a class="reference external" href="https://docs.openshift.org/latest/welcome/index.html"&gt;Openshift Origin&lt;/a&gt; documentation was invaluable in
troubleshooting various issues I had&lt;/li&gt;
&lt;li&gt;I asked a question in #openshift on irc, and someone answered within
5 minutes and was very nice and helpful.&lt;/li&gt;
&lt;li&gt;There's a &lt;a class="reference external" href="https://openshift.com/promotions/for-developers.html"&gt;Free E-Book&lt;/a&gt; (pdf format too) call &amp;quot;Openshift for
Developer's&amp;quot; that explains more about what Openshift is and how it
works. This was super helpful for understanding what all of the
components were, and generally getting started.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="tech"></category><category term="openshift"></category></entry><entry><title>Setting a Language with Selenium Webdriver in Ruby</title><link href="http://blog.lucywyman.me/setting-a-language-with-selenium-webdriver-in-ruby.html" rel="alternate"></link><published>2017-01-23T00:00:00-08:00</published><updated>2017-01-23T00:00:00-08:00</updated><author><name>Lucy Wyman</name></author><id>tag:blog.lucywyman.me,2017-01-23:/setting-a-language-with-selenium-webdriver-in-ruby.html</id><summary type="html">&lt;p&gt;Hello reader! This post was inspired by a project I was working on
recently, adding a 'lang' option to a &lt;a class="reference external" href="https://rubygems.org/gems/selenium-webdriver/versions/2.53.4"&gt;Selenium-Webdriver&lt;/a&gt; (the ruby
gem) wrapper. I needed to instantiate
&lt;a class="reference external" href="http://www.rubydoc.info/gems/selenium-webdriver/0.0.28/Selenium/WebDriver/Driver"&gt;Selenium::Webdriver&lt;/a&gt;.for(:firefox) and (:chrome) both locally and
remotely (Sauce labs, specifically), setting a locale
for each.  There's plenty of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello reader! This post was inspired by a project I was working on
recently, adding a 'lang' option to a &lt;a class="reference external" href="https://rubygems.org/gems/selenium-webdriver/versions/2.53.4"&gt;Selenium-Webdriver&lt;/a&gt; (the ruby
gem) wrapper. I needed to instantiate
&lt;a class="reference external" href="http://www.rubydoc.info/gems/selenium-webdriver/0.0.28/Selenium/WebDriver/Driver"&gt;Selenium::Webdriver&lt;/a&gt;.for(:firefox) and (:chrome) both locally and
remotely (Sauce labs, specifically), setting a locale
for each.  There's plenty of documentation on how to do this in
&lt;a class="reference external" href="http://stackoverflow.com/questions/18645205/set-chromes-language-using-selenium-chromedriver"&gt;Java&lt;/a&gt;, &lt;a class="reference external" href="http://sqa.stackexchange.com/questions/9904/how-to-set-browser-locale-with-chromedriver-python"&gt;C&lt;/a&gt;, and even &lt;a class="reference external" href="http://sqa.stackexchange.com/questions/9904/how-to-set-browser-locale-with-chromedriver-python"&gt;Python&lt;/a&gt;, but it was hard to find the right
way to do it using the ruby gem. So here's what worked for me, where
&lt;code&gt;&amp;#64;&amp;#64;sweep_options[:lang]&lt;/code&gt; is just a variable that holds either
'en-us' or 'ja' (as strings).&lt;/p&gt;
&lt;div class="section" id="locally"&gt;
&lt;h2&gt;Locally&lt;/h2&gt;
&lt;div class="section" id="firefox"&gt;
&lt;h3&gt;Firefox&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;firefox_profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Selenium&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;WebDriver&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Firefox&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Profile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;
&lt;span class="n"&gt;firefox_profile&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;intl.accept_languages&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vc"&gt;@@sweep_options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:lang&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="no"&gt;Selenium&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;WebDriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:firefox&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="ss"&gt;:http_client&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="ss"&gt;:profile&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;firefox_profile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="chrome"&gt;
&lt;h3&gt;Chrome&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;chrome_prefs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;:lang&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="vc"&gt;@@sweep_options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:lang&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="no"&gt;Selenium&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;WebDriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:chrome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="ss"&gt;:http_client&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="ss"&gt;:prefs&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;chrome_prefs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="ss"&gt;:desired_capabilities&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;caps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="remotely"&gt;
&lt;h2&gt;Remotely&lt;/h2&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;Firefox&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;firefox_profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Selenium&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;WebDriver&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Firefox&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Profile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;
&lt;span class="n"&gt;firefox_profile&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;intl.accept_languages&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vc"&gt;@@sweep_options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:lang&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;caps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Selenium&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;WebDriver&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Remote&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Capabilities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;firefox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:firefox_profile&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;firefox_profile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sweep_driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Selenium&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;WebDriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="ss"&gt;:remote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:http_client&lt;/span&gt;          &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:url&lt;/span&gt;                  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:desired_capabilities&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;caps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;Chrome&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;caps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Selenium&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;WebDriver&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Remote&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Capabilities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chromeOptions&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
                                                 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;args&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--lang=&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vc"&gt;@@sweep_options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:lang&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;sweep_driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Selenium&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;WebDriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="ss"&gt;:remote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:http_client&lt;/span&gt;          &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:url&lt;/span&gt;                  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:desired_capabilities&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;caps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://sites.google.com/a/chromium.org/chromedriver/capabilities"&gt;https://sites.google.com/a/chromium.org/chromedriver/capabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities"&gt;https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="tech"></category><category term="ruby"></category><category term="selenium"></category></entry><entry><title>Puppet Orchestrator --application Example</title><link href="http://blog.lucywyman.me/puppet-orchestrator-application-flag.html" rel="alternate"></link><published>2016-10-26T00:00:00-07:00</published><updated>2016-10-26T00:00:00-07:00</updated><author><name>Lucy Wyman</name></author><id>tag:blog.lucywyman.me,2016-10-26:/puppet-orchestrator-application-flag.html</id><summary type="html">&lt;p&gt;As always, this technical blog post began when I was having a problem
and couldn't find the answer on the internet.  I'm writing tests for
Puppet's &lt;a class="reference external" href="https://docs.puppet.com/pe/latest/app_orchestration_overview.html"&gt;application orchestrator&lt;/a&gt; which involve setting up an
application remotely then running some variations of &lt;code&gt;puppet job
run&lt;/code&gt;.  In particular, I need to specify an …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As always, this technical blog post began when I was having a problem
and couldn't find the answer on the internet.  I'm writing tests for
Puppet's &lt;a class="reference external" href="https://docs.puppet.com/pe/latest/app_orchestration_overview.html"&gt;application orchestrator&lt;/a&gt; which involve setting up an
application remotely then running some variations of &lt;code&gt;puppet job
run&lt;/code&gt;.  In particular, I need to specify an environment (&lt;code&gt;-e or
--environment&lt;/code&gt;) and an application instance (&lt;code&gt;-a or
--application&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Here's my directory structure:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
[root&amp;#64;hostname environments]# tree
.
├── production
│&amp;nbsp;&amp;nbsp; ├── environment.conf
│&amp;nbsp;&amp;nbsp; ├── hieradata
│&amp;nbsp;&amp;nbsp; ├── manifests
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── site.pp
│&amp;nbsp;&amp;nbsp; └── modules
└── tmpenv
    ├── manifests
    │&amp;nbsp;&amp;nbsp; └── site.pp
    └── modules
        ├── app_one
        │&amp;nbsp;&amp;nbsp; ├── manifests
        │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── db_component.pp
        │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── init.pp
        │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── web_component.pp
        │&amp;nbsp;&amp;nbsp; └── README.md
        ├── README.md
        └── shared_types_and_providers
            └── lib
                └── puppet
                    ├── provider
                    │&amp;nbsp;&amp;nbsp; ├── testhttp
                    │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── test_file.rb
                    │&amp;nbsp;&amp;nbsp; └── testsql
                    │&amp;nbsp;&amp;nbsp;     └── test_file.rb
                    └── type
                        ├── testhttp.rb
                        └── testsql.rb
&lt;/pre&gt;
&lt;p&gt;And the output of running &lt;code&gt;puppet app show -e tmpenv&lt;/code&gt; is:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
App_one[Health Check Test]
    App_one::Db_component[Health Check Test] =&amp;gt; y21898u9zb3yin5.delivery.puppetlabs.net
        + produces Testsql[Health Check Test]
    App_one::Web_component[Health Check Test] =&amp;gt; hzmjunpoua0mxeo.delivery.puppetlabs.net
        consumes Testsql[Health Check Test]
&lt;/pre&gt;
&lt;p&gt;Ok, so, as I see it there are 2 strong candidates for what the
&amp;quot;&amp;lt;APPLICATION&amp;gt;&amp;quot; referred to in the &lt;a class="reference external" href="https://docs.puppet.com/pe/latest/orchestrator_job_run.html"&gt;puppet orchestrator
documentation&lt;/a&gt; could be: &lt;strong&gt;app_one&lt;/strong&gt; or &lt;strong&gt;App_one[Health Check
Test]&lt;/strong&gt;. Here's the output for each of those (using puppet job plan so
that I'm not creating new job id's and logs all over the place):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
[root&amp;#64;hostname environments]# puppet job plan -e tmpenv -a app_one
Failed to submit plan: puppetlabs.orchestrator/unknown-target: The target was not found in environment tmpenv: app_one

[root&amp;#64;hostname environments]# puppet job plan -e tmpenv -a App_one[Health Check Test]
terminate called after throwing an instance of 'HorseWhisperer::action_validation_error' what():  Validation Error: You supplied too many arguments to the run command. Only 1 is allowed.
  Aborted
&lt;/pre&gt;
&lt;p&gt;In desperation, I decide to try a combination of the two &lt;strong&gt;App_one&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
[root&amp;#64;hostname environments]# puppet job plan -e tmpenv -a
App_one
+-------------------+---------+
| Environment       | tmpenv  |
| Target            | App_one |
| Concurrency Limit | None    |
| Nodes             | 2       |
+-------------------+---------+

Application instances: 1
  - App_one[Health Check Test]

Node run order (nodes in level 0 run before their dependent nodes in
level 1, etc.):
0 -----------------------------------------------------------------------
y21898u9zb3yin5.delivery.puppetlabs.net
    App_one[Health Check Test] - App_one::Db_component[Health Check
    Test]

1 -----------------------------------------------------------------------
hzmjunpoua0mxeo.delivery.puppetlabs.net
    App_one[Health Check Test] - App_one::Web_component[Health
    Check Test]

Use `puppet job run --application 'App_one' --environment
tmpenv` to create and run a job like this.
Node catalogs may have changed since this plan was
generated.
&lt;/pre&gt;
&lt;p&gt;Success!  I later discovered that &lt;code&gt;puppet job plan -e tmpenv -a
&amp;quot;App_one[Health Check Test]&amp;quot;&lt;/code&gt; also worked.  It's still unclear to me
why the name needs be capitalized, but I trust that there are good and
well thought out Reasons which just aren't documented.&lt;/p&gt;
&lt;p&gt;So, if you don't know, now you know :)&lt;/p&gt;
</content><category term="tech"></category><category term="puppet"></category><category term="application"></category><category term="orchestrator"></category><category term="flag"></category><category term="example"></category></entry><entry><title>Minimal Programmatic Puppet Class Creation</title><link href="http://blog.lucywyman.me/programmatic-class-creation.html" rel="alternate"></link><published>2016-10-13T00:00:00-07:00</published><updated>2016-10-13T00:00:00-07:00</updated><author><name>Lucy Wyman</name></author><id>tag:blog.lucywyman.me,2016-10-13:/programmatic-class-creation.html</id><summary type="html">&lt;p&gt;This post began when I was trying to programmatically create my own
Puppet class, googled this exact title, and came up totally empty
handed. After wading through dozens of StackOverflow posts and puppet
docs, I still wasn't sure what I needed to accomplish this or how it
would fit into …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post began when I was trying to programmatically create my own
Puppet class, googled this exact title, and came up totally empty
handed. After wading through dozens of StackOverflow posts and puppet
docs, I still wasn't sure what I needed to accomplish this or how it
would fit into our Beaker tests. I admittedly don't have much
experience with Puppet, and ended up spending a few hours with a
coworker learning about the most efficient way to achieve this.  This
is essentially the post I wish I had found a week ago (or will wish
existed 6 months from now when I need to do the same thing and have
forgotten all of this).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: This post is for n00bs, not l33t
puppet haxxors.  You've been warned.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OTHER WARNING&lt;/strong&gt;: This post assumes that you already have a
remote puppet master, and are most likely using Beaker or some other
testing harness to interact with that master. You'll also need to make
sure $test_harness has root privileges on the master, as you'll be
writing to &lt;code&gt;/etc&lt;/code&gt;.&lt;/p&gt;
&lt;div class="section" id="the-endgame"&gt;
&lt;h2&gt;The Endgame&lt;/h2&gt;
&lt;p&gt;Specifically, I wanted to ensure that a UTF-8 encoded class (with non
&lt;code&gt;\A[a-z][a-z0-9_]*\Z&lt;/code&gt; characters) would not be displayed in the
Puppet Enterprise GUI (per &lt;a class="reference external" href="https://docs.puppet.com/puppet/latest/reference/lang_reserved.html#acceptable-characters-in-names"&gt;Puppet's acceptable character specs&lt;/a&gt;).  I
needed a bare module with a single class that I could programmatically
throw at a master, and then verify had successfully been applied.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-solution-s"&gt;
&lt;h2&gt;The Solution(s)&lt;/h2&gt;
&lt;p&gt;Since it's impossible to verify that the unicode isn't showing up
because it's unicode, and not because I goofed on adding the class
(yeah, yeah, our logging could be improved), I first needed to get
this test working with a kosher name.&lt;/p&gt;
&lt;div class="section" id="files"&gt;
&lt;h3&gt;Files&lt;/h3&gt;
&lt;p&gt;Ok, so really the crux of this problems is what files you need, and
where they need to go on your system.  Since this requires just &lt;em&gt;the one
class&lt;/em&gt;, and none of the other infra around puppetized applications,
only a simple &lt;code&gt;init.pp&lt;/code&gt; is necessary.  Mine looks like this:&lt;/p&gt;
&lt;pre class="code puppet literal-block"&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="na"&gt;myclass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;file&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;'/tmp/make_sure_this_exists'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;ensure&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;present&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;A few important notes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;No trailing whitespace! Anywhere!&lt;/li&gt;
&lt;li&gt;2 spaces, not tab characters&lt;/li&gt;
&lt;li&gt;Single quotes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are &lt;a class="reference external" href="https://docs.puppet.com/guides/style_guide.html"&gt;more official style guideline&lt;/a&gt;, and even a
&lt;a class="reference external" href="http://puppet-lint.com/"&gt;puppet-linter&lt;/a&gt; you can use to verify your &lt;code&gt;init.pp&lt;/code&gt; is
correct.&lt;/p&gt;
&lt;p&gt;Ok, so we've got this file, where does it go on the master?  As far as
I can tell most Puppet-y things that we humans deal with live in
&lt;code&gt;/etc/puppetlabs/code/environments&lt;/code&gt;, and since we're taking the
easy road here we're going to be working in the &lt;code&gt;production&lt;/code&gt;
environment. Before you do anything that directory should look
something like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
.
└── production
    ├── environment.conf
    ├── hieradata
    ├── manifests
    │&amp;nbsp;&amp;nbsp; └── site.pp
    └── modules
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Modules&lt;/strong&gt; is going to be the directory we need to work with.  A
puppet module is a self-contained bundle of code you use to tell
puppet some part of how you want your system to look. There are huge,
widely used puppet modules such as &lt;a class="reference external" href="https://forge.puppet.com/puppetlabs/apache"&gt;Apache&lt;/a&gt;, or there are cute little
5-line modules like ours, and both specify various related aspects of
a system state to achieve a goal.  That's as much as I'll say about
modules, but you can &lt;a class="reference external" href="https://docs.puppet.com/puppet/latest/reference/modules_fundamentals.html"&gt;read more here&lt;/a&gt; if interested.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: In order for agents to be classified by this class, it needs
to go on the master.  This might not be strictly true all of the time,
but it definitely wasn't going to show up in the GUI or get applied to
agents from another agent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="doing-the-thing-manually"&gt;
&lt;h3&gt;Doing the Thing Manually&lt;/h3&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Make the directory&lt;/strong&gt;. To make our module, we'll need to make the
following directory from the &lt;code&gt;production&lt;/code&gt; directory:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code literal-block"&gt;
mkdir -p modules/myclass/manifests`
&lt;/pre&gt;
&lt;p&gt;where &lt;code&gt;myclass&lt;/code&gt; matches the class name you have in your
&lt;code&gt;init.pp&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Copy the file&lt;/strong&gt;. Then put the &lt;code&gt;init.pp&lt;/code&gt; in that directory,
and your set!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Verify it worked&lt;/strong&gt;. There are a few ways to verify that you were
successful:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;SSH into the master, run &lt;code&gt;puppet agent -t&lt;/code&gt;, then SSH into your
agent and verify that the file &lt;code&gt;/tmp/make_sure_this_exists&lt;/code&gt;
does indeed exist&lt;/li&gt;
&lt;li&gt;In the GUI, head to Nodes &amp;gt; Classification, create a new group, then
go to $node_group_page &amp;gt; classes tab and verify your class is in the
dropdown for adding a class.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="automate-it"&gt;
&lt;h2&gt;Automate it&lt;/h2&gt;
&lt;p&gt;So now that we know what we're doing, automating it with Beaker is
pretty easy, especially if we're working in the production
environment.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Make the directory&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="vi"&gt;&amp;#64;class_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'classy'&lt;/span&gt;
&lt;span class="vi"&gt;&amp;#64;modules_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/etc/puppetlabs/code/environments/production/modules/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;&amp;#64;class_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/manifests&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mkdir -p &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;&amp;#64;modules_path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Copy the file&lt;/strong&gt;. Please note, I needed to define my
&lt;code&gt;init.pp&lt;/code&gt; content inside the file for reasons, but you can
also have a local file and use ruby to read from it, which is a
little more best-practice-y. Also note that you'll need to give the
file proper permissions once you've made it!&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
  &lt;span class="n"&gt;manifest&lt;/span&gt; &lt;span class="o"&gt;=&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class="sh"&gt;&lt;/span&gt;&lt;span class="dl"&gt;EOS&lt;/span&gt;&lt;span class="sh"&gt;&lt;/span&gt;
&lt;span class="sh"&gt;class #{&amp;#64;class_name} {
  file { '/tmp/make_sure_this_exists':
    ensure =&amp;gt; present
  }
}
&lt;/span&gt;&lt;span class="dl"&gt;  EOS
&lt;/span&gt;  &lt;span class="n"&gt;create_remote_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;&amp;#64;modules_path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/init.pp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;manifest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;chmod 644 &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;&amp;#64;modules_path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/init.pp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Verify that it worked&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'puppet agent -t'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;agents&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;not_controller&lt;/span&gt; &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;ls_output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'ls /tmp/make_sure_this_exists'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;
&lt;span class="n"&gt;assert_equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ls_output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'/tmp/make_sure_this_exists'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error_message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are lots of ways to verify that it worked, this runs
&lt;code&gt;puppet agent -t&lt;/code&gt; on the master (which compiles the catalog and
applies it to all the agents), then verifies that the output of 'ls'
on the master includes the file our class put there.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Hopefully this was helpful and what you are looking for! This is
really the &lt;em&gt;bare minimum&lt;/em&gt;, need-to-know-basis level of creating a
custom class, for when you just need to get the thing done and don't
want to learn &lt;strong&gt;All Of Puppet&lt;/strong&gt;.  If you do want to learn all of
puppet though, there are some links below!  Enjoy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="puppet-resources"&gt;
&lt;h2&gt;Puppet Resources&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://puppet.com/download-learning-vm"&gt;Learning VM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.example42.com/tutorials/PuppetTutorial/#slide-0"&gt;Puppet Tutorial&lt;/a&gt; slide deck by Alessandro Franceschi&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://sysadmincasts.com/episodes/8-learning-puppet-with-vagrant"&gt;Learn Puppet with Vagrant&lt;/a&gt; by Justin Weissig&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.pindi.us/blog/getting-started-puppet"&gt;Getting Started with Puppet&lt;/a&gt; by Pindi Albert&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="tech"></category><category term="puppet"></category></entry><entry><title>Openstack Image Default Username Reference</title><link href="http://blog.lucywyman.me/openstack-image-default-username-reference.html" rel="alternate"></link><published>2016-09-06T00:00:00-07:00</published><updated>2016-09-06T00:00:00-07:00</updated><author><name>Lucy Wyman</name></author><id>tag:blog.lucywyman.me,2016-09-06:/openstack-image-default-username-reference.html</id><summary type="html">&lt;p&gt;This seems like something that should exist on the internet and kind of
doesn't (or should at least be more searchable). These are only valid if you
obtain an official image from the respective projects repository, and may or
may not be the same if you use a manual image …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This seems like something that should exist on the internet and kind of
doesn't (or should at least be more searchable). These are only valid if you
obtain an official image from the respective projects repository, and may or
may not be the same if you use a manual image.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="45%" /&gt;
&lt;col width="55%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Image&lt;/th&gt;
&lt;th class="head"&gt;Default Username&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;centos_(6|7)_x86_64&lt;/td&gt;
&lt;td&gt;centos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;cirros_0.3.[0-4]_x86_64&lt;/td&gt;
&lt;td&gt;cirros&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;debian_8.2.0_x86_64&lt;/td&gt;
&lt;td&gt;debian&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ubuntu_1(4|6).04_x86_64&lt;/td&gt;
&lt;td&gt;ubuntu&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;fedora_23_x86_64&lt;/td&gt;
&lt;td&gt;fedora&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;rhel_7.2_x86_64&lt;/td&gt;
&lt;td&gt;cloud-user (snowflake much?)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;coreos_(version)_x86_64&lt;/td&gt;
&lt;td&gt;core&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;If you're still not sure, I tend to find which user Openstack wants me to use by trying to login to the instance as root, and get a message similar to:
&lt;tt class="docutils literal"&gt;`
Please login as the user &lt;span class="pre"&gt;&amp;quot;cloud-user&amp;quot;&lt;/span&gt; rather than the user &amp;quot;root&amp;quot;.
Connection to 10.32.161.253 closed.
`&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Source: &lt;a class="reference external" href="http://docs.openstack.org/image-guide/obtain-images.html"&gt;http://docs.openstack.org/image-guide/obtain-images.html&lt;/a&gt;&lt;/p&gt;
</content><category term="tech"></category><category term="openstack"></category></entry><entry><title>Apps I Love</title><link href="http://blog.lucywyman.me/apps-to-love.html" rel="alternate"></link><published>2016-03-19T00:00:00-07:00</published><updated>2016-03-19T00:00:00-07:00</updated><author><name>Lucy Wyman</name></author><id>tag:blog.lucywyman.me,2016-03-19:/apps-to-love.html</id><summary type="html">&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;picture of me w/ phone&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;With so many applications out there, it's difficult to discern which are
valuable, usable, and do what you expect them to.  So, for the sake
of those like me, here are some of the applications I have found
particularly useful or entertaining. I should …&lt;/p&gt;</summary><content type="html">&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;picture of me w/ phone&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;With so many applications out there, it's difficult to discern which are
valuable, usable, and do what you expect them to.  So, for the sake
of those like me, here are some of the applications I have found
particularly useful or entertaining. I should also mention that these are
all free and available on Android.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://multco.lib.overdrive.com"&gt;Overdrive&lt;/a&gt;: You can connect overdrive to local libraries and checkout
books to read or listen to on mobile. I use it to download and listen to
audiobooks, and honestly went from reading 0 books/year to about 1/week.
It's completely changed my life, and made the mundane moments like doing
laundry or walking to class more entertaining.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=de.danoeh.antennapod&amp;amp;hl=en"&gt;AntennaPod&lt;/a&gt;: Similar to Overdrive, this app brings you great listening
material in a different form: podcasts.  It has lots of fancy features now
like adjustable playback speed, automatic deletion once you've listened
to an episode, and turning off if you fall asleep.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=another.music.player&amp;amp;hl=en"&gt;Shuttle&lt;/a&gt;: This is just a music player I'm happy with. If you're happy
with your music player, I wouldn't worry about it.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.wb.headsup&amp;amp;hl=en"&gt;Heads up&lt;/a&gt;: This a fun &amp;quot;We're waiting for something and need to pass
the time&amp;quot; app. It's especially great with kids.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.mint&amp;amp;hl=en"&gt;Mint&lt;/a&gt;: I use this mostly to set and maintain budgets. You need to give it
some very personal banking information, so if you're not into that this isn't
for you, but if you are I've found it very useful. You can even see your
credit score on it, which is always good to know!&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.duolingo.com/"&gt;Duolingo&lt;/a&gt;: You've more than likely already heard of this, but if not
it's an addictive, gamified way of learning new languages.&lt;/li&gt;
&lt;/ol&gt;
</content><category term="loves"></category><category term="tech"></category></entry><entry><title>SCaLE 14x: My Experience</title><link href="http://blog.lucywyman.me/scale-14x.html" rel="alternate"></link><published>2016-01-23T00:00:00-08:00</published><updated>2016-01-23T00:00:00-08:00</updated><author><name>Lucy Wyman</name></author><id>tag:blog.lucywyman.me,2016-01-23:/scale-14x.html</id><summary type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="" src="/theme/images/scale-14x.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="day-0"&gt;
&lt;h2&gt;Day 0:&lt;/h2&gt;
&lt;p&gt;We pulled up to the venue at about 5:30 Friday night, T-90 minutes to Ignite
talks.  I chugged a chocolate milk from the &amp;quot;gift store&amp;quot;, ran through my
slides one last time, got dinner with the bosses, and found myself on a stage.&lt;/p&gt;
&lt;div class="section" id="the-ignite-talks"&gt;
&lt;h3&gt;The Ignite Talks&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Deb …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="" src="/theme/images/scale-14x.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="day-0"&gt;
&lt;h2&gt;Day 0:&lt;/h2&gt;
&lt;p&gt;We pulled up to the venue at about 5:30 Friday night, T-90 minutes to Ignite
talks.  I chugged a chocolate milk from the &amp;quot;gift store&amp;quot;, ran through my
slides one last time, got dinner with the bosses, and found myself on a stage.&lt;/p&gt;
&lt;div class="section" id="the-ignite-talks"&gt;
&lt;h3&gt;The Ignite Talks&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Deb Nicholson, &lt;strong&gt;The Foss Awakens&lt;/strong&gt;. How collaboration and mentoring
are a force for good, told with Star Wars images. Grade-A speaker, definitely
delivered. Great way to start the evening.&lt;/li&gt;
&lt;li&gt;Gilbert Standen, &lt;strong&gt;Building Oracle on LXC&lt;/strong&gt;. He lost me at &amp;quot;Oracle&amp;quot;.&lt;/li&gt;
&lt;li&gt;Me. &lt;strong&gt;Rocking the House&lt;/strong&gt;.  But seriously, people laughed at my jokes,
I got high-fived, it went better than expected.&lt;/li&gt;
&lt;li&gt;Dave Nielsen, &lt;strong&gt;Redis&lt;/strong&gt;. Kind of informative, kind of boring.&lt;/li&gt;
&lt;li&gt;Emily Dunham, &lt;strong&gt;Where's the Cloud&lt;/strong&gt;. Much like Deb, Emily is a veteran
speaker and it shows. Funny, informative, ended on a pun.&lt;/li&gt;
&lt;li&gt;Don Marti, &lt;strong&gt;Web ads&lt;/strong&gt;. I would have appreciated it more if I was less sleepy
I think.&lt;/li&gt;
&lt;li&gt;Justin King, &lt;strong&gt;Choosing a Framework for your project&lt;/strong&gt;. Knowledgable and
well spoken, it's pretty great to watch a not-adult give a talk.  They have
great perspective.&lt;/li&gt;
&lt;li&gt;Corey Quinn: &lt;strong&gt;Docker Must Die: Heresy in the Church of Docker&lt;/strong&gt;. So, so
funny. Dude is a master.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After some good laughs, I headed back up to my room, realized how
overwhelmingly underprepared I was for my talk, finished up my slides and hit
the hay.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="day-1"&gt;
&lt;h2&gt;Day 1:&lt;/h2&gt;
&lt;p&gt;Woke up early and got breakfast at this adorable bakery, &lt;a class="reference external" href="http://www.yelp.com/biz/euro-pane-bakery-pasadena"&gt;Euro Pane&lt;/a&gt;.
Ran through the talk once for good measure, then headed over to the Key Note,
by Mark Shuttleworth. Honestly, it was pretty much a sales pitch, and I
wasn't really into it. But at least I didn't feel bad leaving early. I headed
over to my room, set everything up, then walked around to get out the nerves.&lt;/p&gt;
&lt;div class="section" id="my-talk"&gt;
&lt;h3&gt;My Talk&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://slides.lucywyman.me/modifying-the-kernel.html"&gt;Modifying the Kernel: A How-to&lt;/a&gt;
Not my best, not my worst. I got across the information I wanted to, and got
lots of positive feedback after the talk and throughout the day. More than
anything, I'm relieved that it's over and I can cross it off of my
to-do list.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lunch"&gt;
&lt;h3&gt;Lunch&lt;/h3&gt;
&lt;p&gt;We had guacamole, made tableside. It was &lt;em&gt;bomb&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="keila-banks-automated-teen"&gt;
&lt;h3&gt;Keila Banks, Automated Teen&lt;/h3&gt;
&lt;p&gt;I was really excited for this talk, and was a little let down. Between mic
issues, some nerves, and being a little out of touch with the conference,
I didn't get what I wanted to out of the talk.  All of that said, I have a
lot of respect for Keila giving a talk to such a big room, and for getting up
there in the first place. I'm excited to see what she does in the future, and
hope to see her at other Open Source conferences soon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="justin-mayer-essential-linux-security"&gt;
&lt;h3&gt;Justin Mayer, Essential Linux Security&lt;/h3&gt;
&lt;p&gt;This was pretty nearly the perfect talk.  I learned about a lot of valuable
tools, including changes you can make to your SSH configs, creating SSL
certificates with Let's Encrypt, HSTS, CSP, and other tools to make my
computer and websites safer.  In Justin's words, &amp;quot;Think of the children&amp;quot;.&lt;/p&gt;
&lt;p&gt;You can check out his slides at &lt;a class="reference external" href="https://justinmayer.com/talks/server-security/#/"&gt;https://justinmayer.com/talks/server-security/#/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="brandon-philips-etcd"&gt;
&lt;h3&gt;Brandon Philips, Etcd&lt;/h3&gt;
&lt;p&gt;Also a great talk. Brandon is obviously a well-practiced speaker who
seemed very comfortable on stage.  He's also incredibly knowledgeable, and it
was clear that this talk was only skimming the surface of what he knows on
the subject of etcd. I also didn't know very much about etcd or CoreOS going
in to the talk -- I even thought the d was for daemon :p -- so stood to get
a lot out of it. And I did!&lt;/p&gt;
&lt;p&gt;You can see some of the demos he did at &lt;a class="reference external" href="https://github.com/philips/hacks/tree/master/etcd-demos"&gt;https://github.com/philips/hacks/tree/master/etcd-demos&lt;/a&gt;,
or learn more about CoreOS at &lt;a class="reference external" href="https://coreos.com/"&gt;https://coreos.com/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="day-2"&gt;
&lt;h2&gt;Day 2:&lt;/h2&gt;
&lt;p&gt;This morning was absolutely &lt;em&gt;beautiful&lt;/em&gt; in Pasadena.  I got to walk around
for a while before everyone else woke up, and soak in some Sunday Morning
magic. I don't know. There's something about it.&lt;/p&gt;
&lt;div class="section" id="keynote-sarah-sharp-on-diversity"&gt;
&lt;h3&gt;Keynote: Sarah Sharp on Diversity&lt;/h3&gt;
&lt;p&gt;She said a lot of really important things, but they're also things that everyone
has heard before.  She knows her stuff, and seems very passionate, but that
keynote isn't going to change anything.  Call me a cynic, but from the two
guys behind me asking &amp;quot;Why should minorities get a stipend just for getting an
internship?&amp;quot; to ethnic homogeneity of the audience, I don't hold much hope
for tech companies realizing how important diversity of their workforce is
any time soon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="randal-schwartz-intro-to-dart"&gt;
&lt;h3&gt;Randal Schwartz, Intro to Dart&lt;/h3&gt;
&lt;p&gt;Honestly, I spent this whole talk just working on making this blog. Woops.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="other-things-i-saw-today"&gt;
&lt;h3&gt;Other Things I Saw Today&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Two pugs&lt;/li&gt;
&lt;li&gt;Three grown men yell group hug and execute&lt;/li&gt;
&lt;li&gt;The sun&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I spent the rest of the day doing homework and travelling. It's amazing how
much effort it takes to move a human from A to B, and I have to say I was
so exhausted by the time we got to Corvallis around 12:30.  Lesson learned:
I am not a Sunday-worker. Sundays are for blankets and tea and tv, not
late night flights and talking to other humans.  Overall, SCaLE was
less stressful than I thought it would be, and I don't regret going
like I thought I would. Maybe that sounds lukewarm, and I have to say
it is a &lt;em&gt;very&lt;/em&gt; well run conference, and my particular sentiments don't
reflect a lack of effort on the part of the organizers,
presenters, or exhibitors. Objectively, it's a great conference.  I'm
not really sure how to end this post. I might think of something
better later. For now, ciao gentle reader. You excellent human you.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="conference"></category><category term="tech"></category><category term="experiences"></category></entry></feed>