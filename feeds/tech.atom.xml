<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>blog - Tech</title><link href="http://blog.lucywyman.me/" rel="alternate"></link><link href="http://blog.lucywyman.me/feeds/tech.atom.xml" rel="self"></link><id>http://blog.lucywyman.me/</id><updated>2019-04-13T00:00:00-07:00</updated><entry><title>Promting for Sudo Password in Travis</title><link href="http://blog.lucywyman.me/prompting-for-sudo-in-travis.html" rel="alternate"></link><published>2019-04-13T00:00:00-07:00</published><updated>2019-04-13T00:00:00-07:00</updated><author><name>Lucy Wyman</name></author><id>tag:blog.lucywyman.me,2019-04-13:/prompting-for-sudo-in-travis.html</id><summary type="html">&lt;p&gt;&amp;quot;Lucy, why would you want to do this? ARE YOU OK?&amp;quot;
It's true: making Travis print the sudo prompt and enter it's password
is not a common use case. We were testing a new feature in &lt;a class="reference external" href="https://puppet.com/docs/bolt/"&gt;Bolt&lt;/a&gt;
which opens a subprocess on the local machine and runs a command as …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&amp;quot;Lucy, why would you want to do this? ARE YOU OK?&amp;quot;
It's true: making Travis print the sudo prompt and enter it's password
is not a common use case. We were testing a new feature in &lt;a class="reference external" href="https://puppet.com/docs/bolt/"&gt;Bolt&lt;/a&gt;
which opens a subprocess on the local machine and runs a command as a
different user (&lt;a class="reference external" href="https://github.com/puppetlabs/bolt/blob/master/lib/bolt/transport/local/shell.rb#L29-L45"&gt;code&lt;/a&gt;, &lt;a class="reference external" href="https://puppet.com/docs/bolt/latest/bolt_configuration_options.html#local-transport-configuration-options"&gt;docs&lt;/a&gt;). We like to have as many tests in
Travis so that our users and contributors see if their own code breaks
tests (as opposed to our acceptance tests which run nightly in
Jenkins). So, to test this properly in Travis, I needed to make the
&lt;code&gt;travis&lt;/code&gt; user be prompted for sudo.&lt;/p&gt;
&lt;p&gt;I initially tried creating a different user and running the test as
that user, so that I didn't have to mess with the sudo configuration
of &lt;code&gt;travis&lt;/code&gt;. This turned out to be more difficult than
expected, since switching the user opens a new login which stops the
tests from running.&lt;/p&gt;
&lt;p&gt;So, we were stuck with &lt;code&gt;travis&lt;/code&gt;. Here's the magic lines I added
to the 'before_script' section of &lt;code&gt;.travis.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo &amp;#39;travis:travis&amp;#39; | sudo chpasswd&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sudo sh -c &amp;quot;echo &amp;#39;Defaults authenticate&amp;#39; &amp;gt;&amp;gt; /etc/sudoers&amp;quot;&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sudo sh -c &amp;quot;echo &amp;#39;travis  ALL=(ALL) PASSWD:ALL&amp;#39; &amp;gt;&amp;gt; /etc/sudoers&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default Travis sets &lt;code&gt;Defaults !authenticate&lt;/code&gt; and
&lt;code&gt;travis ALL=(ALL) NOPASSWD:ALL&lt;/code&gt; in
&lt;code&gt;/etc/sudoers.d/travis&lt;/code&gt;. The first thing we needed to do was
give &lt;code&gt;travis&lt;/code&gt; a password so that we could still authenticate,
then undo this sudo config. Also worth noting: you must set the
&lt;code&gt;NOPASSWD&lt;/code&gt; line last, otherwise you won't be able to use sudo to
modify the sudo config!&lt;/p&gt;
&lt;p&gt;Et voila! We can test prompting for a sudo password in Travis.&lt;/p&gt;
</content><category term="tech"></category></entry><entry><title>Cloud Provisioning with Terraform and Bolt</title><link href="http://blog.lucywyman.me/cloud-provisioning-with-terraform-and-bolt.html" rel="alternate"></link><published>2019-01-23T00:00:00-08:00</published><updated>2019-01-23T00:00:00-08:00</updated><author><name>Lucy Wyman</name></author><id>tag:blog.lucywyman.me,2019-01-23:/cloud-provisioning-with-terraform-and-bolt.html</id><summary type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="" src="theme/images/bolt-logo-dark.png" style="height: 200px;" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.terraform.io/intro/index.html"&gt;Terraform&lt;/a&gt; is a cloud provisioning tool that's great at managing
low-level infrastructure components such as compute instances,
storage, and networking. While Terraform is great at creating the
infrastructure you need, it's not great at managing the state of your
resources over time or enforcing certain states. &lt;a class="reference external" href="https://www.slideshare.net/NathanHandler/scale-16x-terraform-all-the-things-90277769"&gt;Nathan Handler&lt;/a&gt;
described it …&lt;/p&gt;</summary><content type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="" src="theme/images/bolt-logo-dark.png" style="height: 200px;" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.terraform.io/intro/index.html"&gt;Terraform&lt;/a&gt; is a cloud provisioning tool that's great at managing
low-level infrastructure components such as compute instances,
storage, and networking. While Terraform is great at creating the
infrastructure you need, it's not great at managing the state of your
resources over time or enforcing certain states. &lt;a class="reference external" href="https://www.slideshare.net/NathanHandler/scale-16x-terraform-all-the-things-90277769"&gt;Nathan Handler&lt;/a&gt;
described it in a talk at OSCON 2018 as a way to get boxes that you
can then go fill with the users, files, applications, and tools you
need.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="" src="theme/images/terraform-all-the-things.jpg" style="height: 400px;" /&gt;
&lt;p class="caption"&gt;Image from &lt;a class="reference external" href="https://www.slideshare.net/NathanHandler/scale-16x-terraform-all-the-things-90277769"&gt;'Terraform All The Things'&lt;/a&gt; by Nathan Handler&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="https://puppet.com/docs/bolt"&gt;Bolt&lt;/a&gt; is an open source remote task runner that can run commands,
scripts, and puppet code across your infrastructure with a few
keystrokes. It combines the declarative Puppet language model with
familiar and convenient imperative code, making it easy to learn and
effective for both one-off tasks and long-term configuration
management.&lt;/p&gt;
&lt;p&gt;I want to demonstrate how powerful using these tools together is, and
how they each enable you quickly get the cloud resources you need and
provision them with minimal setup and code. We'll first create an AWS
EC2 instance with Terraform, the use Bolt to get the IP of the
instance and manage it using Puppet code (with zero Puppet knowledge
required[1]). Let's get started!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you want to follow along or see a more complete example
all my code is available &lt;a class="reference external" href="https://github.com/lucywyman/terraform-provision"&gt;on github&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="create-cloud-resources-with-terraform"&gt;
&lt;h2&gt;Create Cloud Resources with Terraform&lt;/h2&gt;
&lt;p&gt;This step was simple: I followed the &lt;a class="reference external" href="https://learn.hashicorp.com/terraform/getting-started/install.html"&gt;Terraform Getting Started Guide&lt;/a&gt; to set up a
t1.micro &lt;a class="reference external" href="https://aws.amazon.com/ec2/"&gt;EC2&lt;/a&gt; instance, then added a few bits and bobs mostly around
ensuring we can SSH into the machine. Here's some key notes and the
code:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;SSH Key&lt;/strong&gt;: We need to make sure there's a way to SSH into the
boxes we create. I chose to do this with SSH key pairs, but you
could also just have username + password set.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Outputs&lt;/strong&gt;: To make it easier to get the IP addresses for the
instances we create I added an output to produce an array of the IPs
of the instances. Parsing the default terraform json output in Bolt
is equivalent.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ubuntu Xenial AMI&lt;/strong&gt;: I'm totally new to AWS and wasn't sure how to
create a user on my new instance, or more importantly whether Puppet
would work on it. So I just used an ubuntu image instead of the
usual Amazon Linux one.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security Group&lt;/strong&gt;: This adds a security group to allow traffic into
and out of the node so that we can, y'know, make use of it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;~/terraform-playground/example.tf&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;provider&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;aws&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;access_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;ACCESS_KEY&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;secret_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;SECRET_KEY&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="n"&gt;region&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;us-west-2&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Add a local SSH key&lt;/span&gt;
&lt;span class="n"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;aws_key_pair&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;example&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;key_name&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;aws_key&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;public_key&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;PUBLIC_KEY&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Add a permissive security group&lt;/span&gt;
&lt;span class="n"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;aws_security_group&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;allow_all&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;name&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;allow_all&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Allow all inbound traffic&amp;quot;&lt;/span&gt;

  &lt;span class="n"&gt;ingress&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;from_port&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;to_port&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;protocol&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-1&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;cidr_blocks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0.0.0.0/0&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;egress&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;from_port&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;to_port&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;protocol&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-1&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;cidr_blocks&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0.0.0.0/0&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Create EC2 instance&lt;/span&gt;
&lt;span class="n"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;aws_instance&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xenial&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;ami&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ami-076e276d85f524150&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;instance_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;t1.micro&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;key_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;aws_key&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;security_groups&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;allow_all&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Create output for public IPs&lt;/span&gt;
&lt;span class="c1"&gt;# This is an array in case we create multiple instances, but for&lt;/span&gt;
&lt;span class="c1"&gt;# now there&amp;#39;s just one&lt;/span&gt;
&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;public_ips&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;${aws_instance.xenial.*.public_ip}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configure-instances-with-bolt-plans"&gt;
&lt;h2&gt;Configure Instances with Bolt Plans&lt;/h2&gt;
&lt;p&gt;Now that we've created a box with Terraform, we'll:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Collect the public IP in a &lt;a class="reference external" href="https://puppet.com/docs/bolt/latest/bolt_running_plans.html"&gt;Bolt Plan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add it to the &lt;a class="reference external" href="https://puppet.com/docs/bolt/latest/inventory_file.html"&gt;Bolt inventory&lt;/a&gt; file so it picks up configuration&lt;/li&gt;
&lt;li&gt;And do anything we want with it - for example, deploy a small webpage&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First let's create a Bolt inventory file with configuration that Bolt will
need to connect to the EC2 instance. This inventory includes 1 group
called 'terraform', which defaults to using the &lt;a class="reference external" href="https://puppet.com/docs/bolt/latest/bolt_configuration_options.html#ssh-transport-configuration-options"&gt;SSH transport&lt;/a&gt;. It then
&lt;a class="reference external" href="https://puppet.com/docs/bolt/latest/bolt_configuration_options.html"&gt;configures&lt;/a&gt; the ssh private key, user, and host key check for this
group.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;~/terraform_provision/inventory.yaml&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;terraform&lt;/span&gt;
    &lt;span class="nt"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;# This will be populated by the Bolt plan&lt;/span&gt;
    &lt;span class="nt"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;transport&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ssh&lt;/span&gt;
      &lt;span class="nt"&gt;ssh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;private-key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;~/.ssh/id_rsa-phraseless&lt;/span&gt;
        &lt;span class="nt"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu&lt;/span&gt;
        &lt;span class="nt"&gt;host-key-check&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we'll write the Bolt plan to run &lt;code&gt;terraform apply&lt;/code&gt;, collect
the IPs of the instances it creates, and provision those instances.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;~/terraform_provision/plans/init.pp&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;plan&lt;/span&gt; &lt;span class="na"&gt;terraform_provision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;String&lt;/span&gt; &lt;span class="nv"&gt;$tf_path)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;$localhost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="na"&gt;get_targets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;

&lt;span class="c"&gt;  # Create infrastructure with terraform apply&lt;/span&gt;
  &lt;span class="na"&gt;run_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cd ${$tf_path} &amp;amp;&amp;amp; terraform apply&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$localhost)&lt;/span&gt;
  &lt;span class="nv"&gt;$ip_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="na"&gt;run_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cd ${$tf_path} &amp;amp;&amp;amp; terraform output public_ips&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="nv"&gt;$localhost).map&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;$r|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$r&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;stdout&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nv"&gt;$ips&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="na"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$ip_string).map&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;$ip|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$ip.strip&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;

&lt;span class="c"&gt;  # Turn IPs into Bolt targets, and add to inventory&lt;/span&gt;
  &lt;span class="nv"&gt;$targets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$ips.map&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;$ip|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;Target&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${$ip}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add_to_group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;terraform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="c"&gt;&lt;/span&gt;

&lt;span class="c"&gt;  # Deploy website&lt;/span&gt;
  &lt;span class="na"&gt;apply_prep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$targets)&lt;/span&gt;

  &lt;span class="na"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$targets,&lt;/span&gt; &lt;span class="na"&gt;_run_as&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;include&lt;/span&gt; &lt;span class="na"&gt;apache&lt;/span&gt;

    &lt;span class="k"&gt;file&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/var/www/html/index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;ensure&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;puppet:///modules/terraform_provision/site.html&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="na"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$ips&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In less than 30 lines of code we've got an apache server up and
running!&lt;/p&gt;
&lt;p&gt;A few other files we'll need to support running Bolt:&lt;/p&gt;
&lt;p&gt;A bolt configuration file, to tell it where to &lt;a class="reference external" href="https://puppet.com/docs/bolt/1.x/bolt_configuration_options.html#global-configuration-options"&gt;find modules&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;~/terraform_provision/bolt.yaml&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="nt"&gt;modulepath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./modules:~/githubs/modules&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A &lt;a class="reference external" href="https://puppet.com/docs/pe/latest/puppetfile.html"&gt;Puppetfile&lt;/a&gt; with dependencies:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;~/terraform_provision/Puppetfile&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;mod &amp;#39;puppetlabs-apache&amp;#39;, &amp;#39;4.0.0&amp;#39;&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;mod &amp;#39;puppetlabs-stdlib&amp;#39;, &amp;#39;5.2.0&amp;#39;&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;mod &amp;#39;puppetlabs-concat&amp;#39;, &amp;#39;5.2.0&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And lastly, an HTML page to serve:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;~/terraform_provision/files/site.html&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello from Terraform + Bolt!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again, all these files are available in &lt;a class="reference external" href="https://github.com/lucywyman/terraform-provision"&gt;this git repo&lt;/a&gt;, with a bit
more verbosity and structure!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="running-bolt"&gt;
&lt;h2&gt;Running Bolt&lt;/h2&gt;
&lt;p&gt;Phew! Now that all our files are in place, here's how easy it is to
deploy our server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bolt puppetfile install
$ bolt plan run terraform_provision &lt;span class="se"&gt;\&lt;/span&gt;
    -i ~/terraform_provision/inventory.yaml &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;tf_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/terraform-playground
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that's it! The plan should output something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;34.220.231.46&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Visit the IP in your browser and check out your new site!&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="" src="theme/images/index-html.jpg" style="height: 300px;" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Terraform and Bolt are both great tools with different strengths.
Together they make automating your infrastructure so much easier, and
enable you to easily get resources, then configure and manage them
over time, without too much overhead or learning. This example, while
simple, is just the beginning - so what are you going to build?&lt;/p&gt;
&lt;p&gt;[1] If you don't believe me, 6 months ago I took the Puppet
Certification test and got 48%, and I can do this. Really, I mean no
Puppet knowledge!&lt;/p&gt;
&lt;/div&gt;
</content><category term="tech"></category></entry><entry><title>RFID (mis)Adventure</title><link href="http://blog.lucywyman.me/RFID-adventure.html" rel="alternate"></link><published>2018-05-22T00:00:00-07:00</published><updated>2018-05-22T00:00:00-07:00</updated><author><name>Lucy Wyman</name></author><id>tag:blog.lucywyman.me,2018-05-22:/RFID-adventure.html</id><summary type="html">&lt;p&gt;Our office recently relocated to a WeWork, which has an RFID card for
getting onto the floor before business hours and for getting into our
company's suite there. Unfortunately I already have an RFID card (my
&lt;a class="reference external" href="https://kingcounty.gov/depts/transportation/metro/fares-orca/orca-cards.aspx"&gt;Orca card&lt;/a&gt;) attached to my phone, so keeping the WeWork card there
was a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Our office recently relocated to a WeWork, which has an RFID card for
getting onto the floor before business hours and for getting into our
company's suite there. Unfortunately I already have an RFID card (my
&lt;a class="reference external" href="https://kingcounty.gov/depts/transportation/metro/fares-orca/orca-cards.aspx"&gt;Orca card&lt;/a&gt;) attached to my phone, so keeping the WeWork card there
was a no-go. Keeping it in my wallet is also an option, but I don't
typically carry my wallet with me around the office, especially since
I have a limited number of outfits that have pockets. The ideal
solution for my RFID card woes would be something I could wear on my
body, that didn't need to be carried and could easily be passed by the
readers while I was juggling a water bottle and laptop. Something
like...a bracelet! So I set out to copy my WeWork RFID onto an RFID
bracelet. Long story short: I failed, I think because the super-cheap
RFID reader/writer I bought was &lt;em&gt;too&lt;/em&gt; cheap. But I wanted to blog
about it anyway in an effort to &lt;a class="reference external" href="http://time.com/3206754/publication-bias-null-results/"&gt;write about my failures as well as my
successes&lt;/a&gt;. For science!&lt;/p&gt;
&lt;div class="section" id="the-windows-vm"&gt;
&lt;h2&gt;The Windows VM&lt;/h2&gt;
&lt;p&gt;I started out by purchasing the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.amazon.com/125KHZ-Reader-Writer-Duplicator-Control/dp/B079HVQXQY/ref=sr_1_4?ie=UTF8&amp;amp;qid=1526008775&amp;amp;sr=8-4&amp;amp;keywords=rfid+writer#customerReviews"&gt;RFID reader/writer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.amazon.com/YARONGTECH-13-56MHZ-ISO14443A-Silicone-wristband/dp/B01FR63GVG/ref=sr_1_5?ie=UTF8&amp;amp;qid=1526008799&amp;amp;sr=8-5&amp;amp;keywords=rfid+bracelet#customerReviews"&gt;RFID Bracelets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After spending about an hour researching Linux utilities for RFID
readers/writers, I decided I should just use the software on the CD
that came with the copier. It was a .exe of course, so the first order
of business was spinning up a windows VM on my machine. The first snag
I hit was that the CD could only be installed on 32-bit Windows, not
64-bit, so after getting my 64-bit &lt;a class="reference external" href="http://aka.ms/ie11.win81.vagrant"&gt;Windows 8.1 VM&lt;/a&gt; setup I had to
tear it down and find a vagrant box for &lt;a class="reference external" href="https://app.vagrantup.com/mrh1997/boxes/vanilla-win7-32bit"&gt;32-bit Windows&lt;/a&gt;. 'Snag'
might be a strong word there, it was mostly just annoying and time
consuming. This is &lt;a class="reference external" href="https://gist.github.com/lucywyman/373c7a4352bb207bc41d57eb774e66fe"&gt;the Vagrantfile&lt;/a&gt; I ended up using. Important to
note that in addition to the particular Windows VM, I also needed to
mount the copier device to the VM.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-copier"&gt;
&lt;h2&gt;The Copier&lt;/h2&gt;
&lt;p&gt;With the software installed, and the correct device mounted so I could
connect the copier to the Windows VM, it was time to copy RFIDs! Or so
I thought. The copier beeped when I plugged it in, and successfully
connected to the GUI. Yay! I put my WeWork card on it and clicked
'Read'. It turned red and made angry beeping noises. Boo. I collected
a few other RFIDs I had around the house -- my Orca card, the badge
from our Portland office, my passport -- and tried those as well, all
without success. Maybe I was doing it wrong? The copier came with some
blank RFID tags, so I put one on the copier and wrote random data to
it. It beeped successfully and turned green. Sigh.&lt;/p&gt;
&lt;p&gt;That's really all there was to it. My copier seemed to be working, but
didn't have the right frequencies for the things I actually needed to
read. Forgetting / losing my WeWork card continues to be a problem, so
stayed tuned for other attempts at the bracelet solution or other
creative solutions to the problem!&lt;/p&gt;
&lt;/div&gt;
</content><category term="tech"></category><category term="experiences"></category></entry><entry><title>Managing CoreOS With Puppet</title><link href="http://blog.lucywyman.me/managing-coreos-with-puppet.html" rel="alternate"></link><published>2017-10-03T00:00:00-07:00</published><updated>2017-10-03T00:00:00-07:00</updated><author><name>Lucy Wyman</name></author><id>tag:blog.lucywyman.me,2017-10-03:/managing-coreos-with-puppet.html</id><summary type="html">&lt;div class="section" id="why"&gt;
&lt;h2&gt;Why&lt;/h2&gt;
&lt;p&gt;To be perfectly honest, the only reason I wanted to do this is because I
submitted a talk to &lt;a class="reference external" href="https://puppet.com/puppetconf"&gt;PuppetConf&lt;/a&gt; on the subject and it got accepted. Woops.
Way to go past Lucy.&lt;/p&gt;
&lt;p&gt;There are a few cases where managing CoreOS with Puppet makes sense though.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how"&gt;
&lt;h2&gt;How&lt;/h2&gt;
&lt;p&gt;Here's the …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="why"&gt;
&lt;h2&gt;Why&lt;/h2&gt;
&lt;p&gt;To be perfectly honest, the only reason I wanted to do this is because I
submitted a talk to &lt;a class="reference external" href="https://puppet.com/puppetconf"&gt;PuppetConf&lt;/a&gt; on the subject and it got accepted. Woops.
Way to go past Lucy.&lt;/p&gt;
&lt;p&gt;There are a few cases where managing CoreOS with Puppet makes sense though.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how"&gt;
&lt;h2&gt;How&lt;/h2&gt;
&lt;p&gt;Here's the basic steps we'll be taking to set up a puppet agent running on
CoreOS, all running in Vagrant (because I'm too cheap to buy cloud space for
this).&lt;/p&gt;
&lt;div class="section" id="stand-up-puppet-master-and-agent"&gt;
&lt;h3&gt;Stand Up Puppet Master and Agent&lt;/h3&gt;
&lt;p&gt;The first thing I wanted to do was get some basic Puppet infrastructure up that
I could integrate my CoreOS nodes into. I used the following Vagrantfile and
provisioning scripts to get my VMs running.&lt;/p&gt;
&lt;p&gt;I also installed the &lt;a class="reference external" href="https://github.com/oscar-stack/vagrant-hosts"&gt;vagrant-hosts&lt;/a&gt; plugin to make sure the VMs could talk to
each other, and minimize the amount of networking voodoo I had to do:
&lt;code&gt;vagrant plugin install vagrant-hosts&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ tree
.
├── puppet-agent-install.sh
├── puppet-master-install.sh
└── Vagrantfile
&lt;/pre&gt;
&lt;div class="section" id="vagrantfile"&gt;
&lt;h4&gt;Vagrantfile&lt;/h4&gt;
&lt;p&gt;Configuration file for the virtual machines we'll install puppet master and agents on&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="no"&gt;Vagrant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;puppetmaster&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ubuntu/xenial64&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;puppet-master&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt; &lt;span class="ss"&gt;:&amp;quot;private_network&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;10.20.1.80&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;provision&lt;/span&gt; &lt;span class="ss"&gt;:hosts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:sync_hosts&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;provision&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;shell&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;puppet-master-install.sh&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;provider&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;virtualbox&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;vb&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;vb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customize&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;modifyvm&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--memory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;4096&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;puppetagent&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;centos/7&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;puppet-agent&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt; &lt;span class="ss"&gt;:&amp;quot;private_network&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;10.20.1.81&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;provision&lt;/span&gt; &lt;span class="ss"&gt;:hosts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:sync_hosts&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;provision&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;shell&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;puppet-agent-install.sh&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="puppet-master-install-sh"&gt;
&lt;h4&gt;puppet-master-install.sh&lt;/h4&gt;
&lt;p&gt;Provisioning script for the vagrant VM with puppet master on it&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="ch"&gt;#!/bin/bash
&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; ps aux &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;puppet&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep -v grep &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt; /dev/null
&lt;span class="k"&gt;then&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Puppet Master is already installed. Exiting...&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="c1"&gt;# Install puppet master
&lt;/span&gt;  wget https://apt.puppetlabs.com/puppetlabs-release-pc1-xenial.deb
  sudo dpkg -i puppetlabs-release-pc1-xenial.deb
  sudo apt-get -yq update
  sudo apt-get -yq install puppetserver
  &lt;span class="c1"&gt;#sudo apt-get -yq install puppet
&lt;/span&gt;  sudo service puppetserver start

  &lt;span class="c1"&gt;# Configure /etc/hosts file
&lt;/span&gt;  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;# Host config for Puppet Master and Agent Nodes
  192.168.33.10   puppet-master puppet-master
  192.168.33.11   puppet-agent puppet-agent&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts

  &lt;span class="c1"&gt;# Add optional alternate DNS names to /etc/puppet/puppet.conf
&lt;/span&gt;  sudo &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;
  [main]
  dns_alt_names = puppet,puppet-master&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/puppetlabs/puppet/puppet.conf
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="puppet-agent-install-sh"&gt;
&lt;h4&gt;puppet-agent-install.sh&lt;/h4&gt;
&lt;p&gt;Provisioning script for the vagrant VM with puppet agent on it&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="ch"&gt;#!/bin/bash
&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; ps aux &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;puppet&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep -v grep &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt; /dev/null
&lt;span class="k"&gt;then&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Puppet Agent is already installed. Moving on...&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
  &lt;span class="c1"&gt;# Install puppet agent
&lt;/span&gt;  sudo rpm -Uvh https://yum.puppetlabs.com/puppetlabs-release-pc1-el-7.noarch.rpm
  sudo yum install -y puppet-agent
  sudo /opt/puppetlabs/bin/puppet resource service puppet &lt;span class="nv"&gt;ensure&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;running &lt;span class="nv"&gt;enable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;

  &lt;span class="c1"&gt;# Configure /etc/hosts file
&lt;/span&gt;  sudo &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;# Host config for Puppet Master and Agent Nodes
  192.168.33.10   puppet-master puppet-master
  192.168.33.11   puppet-agent puppet-agent&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/hosts

  &lt;span class="c1"&gt;# Add optional alternate DNS names to /etc/puppet/puppet.conf
&lt;/span&gt;  sudo &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[agent]
  server=puppet-master&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/puppetlabs/puppet/puppet.conf

  sudo /opt/puppetlabs/bin/puppet agent --enable
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Once everything is in place, we'll start up the VMs:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
vagrant up
&lt;/pre&gt;
&lt;p&gt;And run puppet on the agent and master&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
vagrant ssh puppetagent
sudo su -
puppet agent -t
exit &amp;amp;&amp;amp; exit
vagrant ssh puppetmaster
sudo su -
puppet agent -t
puppet cert list --all
puppet cert sign --all
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="create-coreos-agent-node"&gt;
&lt;h3&gt;Create CoreOS Agent Node&lt;/h3&gt;
&lt;p&gt;The next step is to integrate a &lt;a class="reference external" href="https://coreos.com/"&gt;CoreOS&lt;/a&gt; node running &lt;a class="reference external" href="https://docs.puppet.com/puppet/latest/about_agent.html"&gt;puppet agent&lt;/a&gt; in a
container into our puppet infrastructure. This involves a lot of changes, so
let's break it down:&lt;/p&gt;
&lt;p&gt;Add the following block to your Vagrantfile in the 'config' block&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;coreosagent&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
  &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forward_agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;coreos-beta&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;box_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://storage.googleapis.com/beta.release.core-os.net/amd64-usr/current/coreos_production_vagrant.json&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;coreos-agent&amp;quot;&lt;/span&gt;

  &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;provider&lt;/span&gt; &lt;span class="ss"&gt;:virtualbox&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="c1"&gt;# On VirtualBox, we don't have guest additions or functional vboxsf&lt;/span&gt;
    &lt;span class="c1"&gt;# in CoreOS, so tell Vagrant that so it can be smarter.&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_guest_additions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;functional_vboxsf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2048&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customize&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;modifyvm&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--cpuexecutioncap&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;100&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt; &lt;span class="ss"&gt;:private_network&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;10.20.1.82&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;provision&lt;/span&gt; &lt;span class="ss"&gt;:hosts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:sync_hosts&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exist?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;CLOUD_CONFIG_PATH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;provision&lt;/span&gt; &lt;span class="ss"&gt;:file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:source&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;CLOUD_CONFIG_PATH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:destination&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/tmp/vagrantfile-user-data&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;provision&lt;/span&gt; &lt;span class="ss"&gt;:shell&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:inline&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:privileged&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;You'll also need the following in a file called &lt;code&gt;config.rb&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="c1"&gt;#Size of the CoreOS cluster created by Vagrant&lt;/span&gt;
&lt;span class="vg"&gt;$num_instances&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="c1"&gt;# Used to fetch a new discovery token for a cluster of size $num_instances&lt;/span&gt;
&lt;span class="vg"&gt;$new_discovery_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://discovery.etcd.io/new?size=&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vg"&gt;$num_instances&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# Official CoreOS channel from which updates should be downloaded&lt;/span&gt;
&lt;span class="vg"&gt;$update_channel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'beta'&lt;/span&gt;

&lt;span class="c1"&gt;# Automatically replace the discovery token on 'vagrant up'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'user-data'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;eql?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'up'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'open-uri'&lt;/span&gt;
  &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'yaml'&lt;/span&gt;

  &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;$new_discovery_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;

  &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;YAML&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'user-data'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key?&lt;/span&gt; &lt;span class="s1"&gt;'coreos'&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'coreos'&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;key?&lt;/span&gt; &lt;span class="s1"&gt;'etcd'&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'coreos'&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'etcd'&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'discovery'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key?&lt;/span&gt; &lt;span class="s1"&gt;'coreos'&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'coreos'&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;key?&lt;/span&gt; &lt;span class="s1"&gt;'etcd2'&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'coreos'&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'etcd2'&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'discovery'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# Fix for YAML.load() converting reboot-strategy from 'off' to `false`&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key?&lt;/span&gt; &lt;span class="s1"&gt;'coreos'&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'coreos'&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;key?&lt;/span&gt; &lt;span class="s1"&gt;'update'&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'coreos'&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'update'&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;key?&lt;/span&gt; &lt;span class="s1"&gt;'reboot-strategy'&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'coreos'&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'update'&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'reboot-strategy'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
      &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'coreos'&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'update'&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'reboot-strategy'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'off'&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;yaml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;YAML&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'user-data'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#cloud-config&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And lastly add a &lt;code&gt;user-data&lt;/code&gt; file (your cloud-config file)&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
#cloud-config

hostname: coreos-agent

coreos:
  units:
  - name: puppet.service
    command: start
    content: |
      [Unit]
      Description=Puppet
      After=docker.service
      Requires=docker.service

      [Service]
      TimeoutStartSec=0
      ExecStartPre=-/usr/bin/docker kill puppet1
      ExecStartPre=-/usr/bin/docker rm puppet1
      ExecStartPre=/usr/bin/docker pull puppet/puppet-agent

      [Install]
      WantedBy=multi-user.target

  - name: 00-ens192.network
    runtime: true
    content: |
      [Match]
      Name=ens192

      [Network]
      DNS=10.20.1.82
      Domains=coreos-agent
      Address=10.20.1.82
      Gateway=10.0.2.2
&lt;/pre&gt;
&lt;p&gt;Now we'll get that machine up and running:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
vagrant up
vagrant ssh coreosagent
&lt;/pre&gt;
&lt;p&gt;And wham, you're in a coreos machine!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="connecting-agent-to-master"&gt;
&lt;h3&gt;Connecting Agent to Master&lt;/h3&gt;
&lt;p&gt;The only thing left to do is start our puppet agent container on the CoreOS VM and get it connected to the master.&lt;/p&gt;
&lt;div class="section" id="add-puppet-conf-to-agent"&gt;
&lt;h4&gt;Add puppet.conf to agent&lt;/h4&gt;
&lt;p&gt;Since our CoreOS machine doesn't know it's a puppet agent yet (or about puppet at all), we need to manually add &lt;code&gt;/etc/puppetlabs/puppet/puppet.conf&lt;/code&gt; to configure the agent that will run in a docker container.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="test-it-out"&gt;
&lt;h2&gt;Test It Out&lt;/h2&gt;
&lt;p&gt;Ok, let's make sure our setup is actually working!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.admintome.com/blog/configure-puppet-on-coreos/"&gt;http://www.admintome.com/blog/configure-puppet-on-coreos/&lt;/a&gt;
&lt;a class="reference external" href="https://coreos.com/os/docs/latest/booting-on-vagrant.html#cloud-config"&gt;https://coreos.com/os/docs/latest/booting-on-vagrant.html#cloud-config&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="tech"></category><category term="containers"></category></entry><entry><title>Installing a Package in an Openshift Container (Kind Of)</title><link href="http://blog.lucywyman.me/installing-a-package-in-an-openshift-container.html" rel="alternate"></link><published>2017-07-25T00:00:00-07:00</published><updated>2017-07-25T00:00:00-07:00</updated><author><name>Lucy Wyman</name></author><id>tag:blog.lucywyman.me,2017-07-25:/installing-a-package-in-an-openshift-container.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;TODO Better title. Ping me with ideas!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Fair warning: This article assumes that you have a decent
understanding of Openshift from the outset, because explaining all the
concepts used here would take too much space. I'll try to link to
resources where applicable though, so that words don't go undefined …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;TODO Better title. Ping me with ideas!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Fair warning: This article assumes that you have a decent
understanding of Openshift from the outset, because explaining all the
concepts used here would take too much space. I'll try to link to
resources where applicable though, so that words don't go undefined.&lt;/p&gt;
&lt;p&gt;The typical happy path for using &lt;a class="reference external" href="http://docs.openshift.org/"&gt;Openshift&lt;/a&gt; is to use it's &lt;a class="reference external" href="https://docs.openshift.org/latest/architecture/core_concepts/builds_and_image_streams.html#source-build"&gt;Source
to Image (s2i)&lt;/a&gt; builder to take a &lt;a class="reference external" href="https://docs.openshift.com/enterprise/3.2/dev_guide/builds.html#source-code"&gt;git repo&lt;/a&gt; or &lt;a class="reference external" href="https://docs.openshift.com/enterprise/3.2/dev_guide/builds.html#dockerfile-source"&gt;dockerfile&lt;/a&gt; and
turn it into a container running on Openshift. In general, this works
just fine. The s2i builder &lt;a class="reference external" href="https://docs.Openshift.com/enterprise/3.1/dev_guide/new_app.html#language-detection"&gt;detects which language your app is using&lt;/a&gt;
and deploys that application appropriately, including starting the
webserver. However, if your project needs more dependencies than
Openshift expects, it's very difficult to add those dependencies to
the container. For good reason, your user in the container is pretty
neutered, which means installing a package is impossible.  And you
don't have access to the processes that are installing dependencies
for your application, since those come from the default (probably
CentOS or RHEL) base image that Openshift uses. So, what do you need
if you need to install a package in your container? We'll explain!&lt;/p&gt;
&lt;p&gt;In short, you'll need to:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Copy the s2i builder that your application is using (based on it's language)&lt;/li&gt;
&lt;li&gt;Modify it as necessary for your application&lt;/li&gt;
&lt;li&gt;Create a new application in Openshift that uses your Dockerfile to create an image&lt;/li&gt;
&lt;li&gt;Create your &amp;quot;real&amp;quot; application in Openshift, using the image you just created as a base and the Source strategy&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We'll go through it step by step!&lt;/p&gt;
&lt;div class="section" id="copy-the-default-s2i-builder"&gt;
&lt;h2&gt;Copy the Default S2I Builder&lt;/h2&gt;
&lt;p&gt;The best way to find the s2i builder your application will need is to
reference the &lt;a class="reference external" href="https://docs.Openshift.org/latest/using_images/s2i_images/ruby.html"&gt;Openshift S2I documentation&lt;/a&gt;, find the language your
application is in, and then in the first paragraph there should be a
link to the git repo where the default s2i builder for that language
lives.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="" src="static/Openshift-s2i-docs.png" /&gt;
&lt;/div&gt;
&lt;p&gt;Searching for 'Openshift $LANG S2I builder'
also usually resulted in the first hit being the &amp;quot;official&amp;quot; s2i
builder, but the git repos don't make that clear so going through the
documentation should give you a little more certainty you found the
right one.&lt;/p&gt;
&lt;p&gt;I personally cloned the whole repo, then copied the relevant files into a
subdirectory of my application so that everything I needed was
packaged together. Later on, this will make things a little easier. If you'd rather separate your concerns though, you
can also fork + download + modify the s2i builder and keep it separate
from your application.&lt;/p&gt;
&lt;p&gt;Here's what my application directory ended up looking like, where everything
under &lt;code&gt;openshift-build&lt;/code&gt; is copied from the &lt;a class="reference external" href="https://github.com/sclorg/s2i-ruby-container/"&gt;Openshift ruby s2i&lt;/a&gt; repo.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
.
├── app.rb
├── config.ru
├── Gemfile
├── helpers
│&amp;nbsp;&amp;nbsp; └── helpers.rb
├── openshift-build
│&amp;nbsp;&amp;nbsp; ├── cccp.yml
│&amp;nbsp;&amp;nbsp; ├── Dockerfile
│&amp;nbsp;&amp;nbsp; ├── root
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── opt
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;     └── app-root
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;         └── etc
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;             ├── generate_container_user
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;             ├── puma.cfg
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;             └── scl_enable
│&amp;nbsp;&amp;nbsp; ├── s2i
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── bin
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;     ├── assemble
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;     ├── run
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;     └── usage
│&amp;nbsp;&amp;nbsp; └── test
│&amp;nbsp;&amp;nbsp;     ├── puma-test-app
│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; ├── app.rb
│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; ├── config.ru
│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; ├── Gemfile
│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; └── Gemfile.lock
│&amp;nbsp;&amp;nbsp;     ├── rack-test-app
│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; ├── app.rb
│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; ├── config.ru
│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; ├── Gemfile
│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; └── Gemfile.lock
│&amp;nbsp;&amp;nbsp;     └── run
├── public
│&amp;nbsp;&amp;nbsp; └── images
│&amp;nbsp;&amp;nbsp;     └── approval.gif
├── README.md
├── spec
│&amp;nbsp;&amp;nbsp; └── kukla
│&amp;nbsp;&amp;nbsp;     ├── helper_spec.rb
│&amp;nbsp;&amp;nbsp;     └── kukla_spec.rb
└── views
    └── index.erb
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Key to Success&lt;/strong&gt;: Make sure you include everything in the &lt;code&gt;s2i&lt;/code&gt; and
&lt;code&gt;root&lt;/code&gt; directories from the default s2i builder! These files are
necessary for building your first image later on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="modify-as-necessary"&gt;
&lt;h2&gt;Modify As Necessary&lt;/h2&gt;
&lt;p&gt;I was trying to trick Git into thinking I had a user on Openshift, so
that I could clone some dependencies for my application. I also needed
&lt;a class="reference external" href="https://www.npmjs.com/"&gt;npm&lt;/a&gt; for Reasons. I looked at the &lt;a class="reference external" href="https://github.com/sclorg/s2i-nodejs-container"&gt;nodejs s2i builder&lt;/a&gt;, which uses
&lt;a class="reference external" href="https://cwrap.org/nss_wrapper.html"&gt;nss_wrapper&lt;/a&gt; to achieve the Git-trick, and just copy-pasted the
important bits (apologies that the application isn't open source so I
can just reference it):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;     INSTALL_PKGS=&amp;quot;rh-ruby24 rh-ruby24-ruby-devel rh-ruby24-rubygem-rake rh-ruby24-rubygem-bundler rh-nodejs6 rh-nodejs6-npm nss_wrapper&amp;quot; &amp;amp;&amp;amp; \
---
&amp;gt;     INSTALL_PKGS=&amp;quot;rh-ruby24 rh-ruby24-ruby-devel rh-ruby24-rubygem-rake rh-ruby24-rubygem-bundler rh-nodejs6&amp;quot; &amp;amp;&amp;amp; \
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I also added &lt;a class="reference external" href="https://github.com/sclorg/s2i-nodejs-container/blob/master/4/root/opt/app-root/etc/generate_container_user"&gt;this file&lt;/a&gt; from the nodejs builder to &lt;code&gt;$APP_ROOT/openshift-build/root/opt/app-root/etc&lt;/code&gt; so that my application could use nss_wrapper.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create-application-from-dockerfile"&gt;
&lt;h2&gt;Create Application from Dockerfile&lt;/h2&gt;
&lt;p&gt;The next step is to create an image in the &lt;a class="reference external" href="https://docs.openshift.com/container-platform/3.3/dev_guide/managing_images.html#accessing-the-internal-registry"&gt;Openshift internal
repository&lt;/a&gt; from our special S2I build. This will be the base
image for our application, instead of the default Openshift builder
image. I personally found this a little bit easier to do in the UI
than on the CLI, but will explain both.&lt;/p&gt;
&lt;p&gt;The key when you create this application is to use the &lt;a class="reference external" href="https://docs.openshift.com/enterprise/3.2/dev_guide/builds.html#docker-strategy-options"&gt;Docker source
strategy&lt;/a&gt; using the Dockerfile (and all the other files!) you copied
from the default s2i builder. This is where it comes in handy to have
those files inside your application: if you point Openshift to where
those files are (&lt;code&gt;spec.strategy.dockerStrategy.dockerfilePath&lt;/code&gt;
in the buildConfig), Openshift will use that for it's Docker build
strategy. As I describe in &lt;a class="reference external" href="http://blog.lucywyman.me/deploy-private-git-repo-to-openshift.html"&gt;this blog post&lt;/a&gt;, it's difficult to create
a new application using your own buildConfig. I didn't feel like
messing with templates at this point, so I just:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Created an application using the default image for ruby&lt;/li&gt;
&lt;li&gt;Edited the buildConfig&lt;/li&gt;
&lt;li&gt;Rebuilt the application.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's how it went down:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I recommend naming this first application 'myapp-builder',
or something along those lines.&lt;/p&gt;
&lt;div class="section" id="in-the-cli"&gt;
&lt;h3&gt;In the CLI&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Run &lt;code&gt;oc new-app &amp;lt;appropriate configurations&amp;gt;&lt;/code&gt;. As previously mentioned, Openshift will detect the language your application is in and use that default image. I highly recommend running &lt;code&gt;oc new-app --help&lt;/code&gt; to see if there are any other options you'd like to use!&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;oc edit bc/myapp-builder&lt;/code&gt; and modify the strategy section of the buildConfig to have the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code literal-block"&gt;
strategy:
  type: Docker
  dockerStrategy:
    dockerfilePath: openshift-build/Dockerfile
    env:
      - name: MYVAR
        value: my_value
&lt;/pre&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;Close and save the buildconfig.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;oc start-build myapp-builder&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="in-the-ui"&gt;
&lt;h3&gt;In the UI&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Note: I believe the UI workflow only works if your file source is Github, not a Docker image&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Click 'Add to Project' in the header navigation&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="figure"&gt;
&lt;img alt="" src="static/add-project.png" /&gt;
&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Select the language (and version, etc.) your app is in&lt;/li&gt;
&lt;li&gt;Fill out the application details appropriately. There's nothing special you need to do on this page.&lt;/li&gt;
&lt;li&gt;Now that you've created your application, go to 'Builds -&amp;gt; Builds' in the left navigation&lt;/li&gt;
&lt;li&gt;Select the application you just created&lt;/li&gt;
&lt;li&gt;In the top right, select 'Actions -&amp;gt; Edit Yaml'&lt;/li&gt;
&lt;li&gt;Modify your buildConfig to use the Docker source strategy. The key changes here are under the &lt;code&gt;strategy&lt;/code&gt; section. You should end up with something that looks like this:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code literal-block"&gt;
strategy:
  type: Docker
  dockerStrategy:
    dockerfilePath: openshift-build/Dockerfile
    env:
      - name: MYVAR
        value: my_value
&lt;/pre&gt;
&lt;p&gt;Then save the config
8. In the top-right corner, click 'Start Build'&lt;/p&gt;
&lt;p&gt;And you're done! The resulting image will be published to the internal container registry with the label 'app-name:latest'.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="create-application-from-source-using-image"&gt;
&lt;h2&gt;Create Application from Source, Using Image&lt;/h2&gt;
&lt;p&gt;The final step, creating our application image from the image we just
created! The key when creating this application is to use the &lt;a class="reference external" href="https://docs.openshift.com/enterprise/3.2/dev_guide/builds.html#source-to-image-strategy-options"&gt;source
strategy&lt;/a&gt; with &lt;strong&gt;your image&lt;/strong&gt; as the
&lt;code&gt;source.strategy.sourceStrategy.name&lt;/code&gt; value. This should be the
name of the application you just created. The steps for creating this
application are more or less the same as they were in the previous
step:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Create an application using the default image in your language&lt;/li&gt;
&lt;li&gt;Edit the buildConfig&lt;/li&gt;
&lt;li&gt;Rebuild the application&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can follow the same steps enumerated above for the preferred
interface, and here's roughly what your buildConfig should look like
when you're finished:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
strategy:
  sourceStrategy:
    env:
    - name: MYVAR
      value: my_value
    from:
      kind: ImageStreamTag
      name: myapp-builder:latest
&lt;/pre&gt;
&lt;p&gt;That last line being the critical point! Make sure you're referencing your builder image.&lt;/p&gt;
&lt;p&gt;And there you have it! Once you've rebuilt your application, you're
all set.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="making-changes"&gt;
&lt;h2&gt;Making Changes&lt;/h2&gt;
&lt;p&gt;If you make changes to &lt;em&gt;your application&lt;/em&gt;, you only need to rebuild
the application, not the application builder. However, if you make
changes to your Dockerfile or any other part of the underlying image
(say you need another package installed), then you will need to
rebuild the app-builder image &lt;em&gt;and&lt;/em&gt; your application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Openshift is in an interesting place developmentally, where they have
pretty good documentation, relatively mature technology, and awesome
tech support on IRC, but almost no community documentation (think blog
posts, stack overflow questions, etc.). I would often find myself
reading a post from the Openshift blog that was published in 2013, and
hope it was still relevant, or be looking through github issues and
irc logs for answers. But, there were still a number of resources I
found very helpful through this journey:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;First, I &lt;em&gt;highly&lt;/em&gt; recommend asking any questions in #openshift
(irc.freenode.net). Folks were kind, quick to respond, super
helpful.&lt;/li&gt;
&lt;li&gt;The &lt;a class="reference external" href="https://www.openshift.com/promotions/for-developers.html"&gt;Openshift book&lt;/a&gt; is a great resource if you have the time. I would suggest only reading the first 1/3 of it or so to understand core concepts, then starting your own project.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.openshift.com/enterprise/3.2/dev_guide/builds.html"&gt;This doc&lt;/a&gt; is the best &amp;quot;Everything you need to know about Openshift builds&amp;quot; documentation&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.openshift.com/create-s2i-builder-image/"&gt;This&lt;/a&gt; is a
pretty good resource on the anatomy of an s2i builder, though
definitely isn't required reading for this post.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="tech"></category><category term="Openshift"></category></entry><entry><title>How to Deploy a Private Git Repo to Openshift</title><link href="http://blog.lucywyman.me/deploy-private-git-repo-to-openshift.html" rel="alternate"></link><published>2017-06-15T00:00:00-07:00</published><updated>2017-06-15T00:00:00-07:00</updated><author><name>Lucy Wyman</name></author><id>tag:blog.lucywyman.me,2017-06-15:/deploy-private-git-repo-to-openshift.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://openshift.com"&gt;Openshift&lt;/a&gt; is &lt;a class="reference external" href="http://www.redhat.com/en"&gt;Redhat's&lt;/a&gt; platform as a service, aka a place for you
to deploy your application to (think Heroku, Google App Engine, or AWS
Beanstalk). They have a tool called &lt;a class="reference external" href="https://docs.openshift.com/enterprise/3.1/architecture/core_concepts/builds_and_image_streams.html#source-build"&gt;Source 2 Image (S2I)&lt;/a&gt; that
allows you to pass in a &lt;a class="reference external" href="https://docs.openshift.org/latest/dev_guide/builds/index.html"&gt;source&lt;/a&gt; (in the form of a docker image, git …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://openshift.com"&gt;Openshift&lt;/a&gt; is &lt;a class="reference external" href="http://www.redhat.com/en"&gt;Redhat's&lt;/a&gt; platform as a service, aka a place for you
to deploy your application to (think Heroku, Google App Engine, or AWS
Beanstalk). They have a tool called &lt;a class="reference external" href="https://docs.openshift.com/enterprise/3.1/architecture/core_concepts/builds_and_image_streams.html#source-build"&gt;Source 2 Image (S2I)&lt;/a&gt; that
allows you to pass in a &lt;a class="reference external" href="https://docs.openshift.org/latest/dev_guide/builds/index.html"&gt;source&lt;/a&gt; (in the form of a docker image, git
repo, or binary) and then builds an Openshift docker image from that.
Because I'm using this as a project for work, and my application
already lives on &lt;a class="reference external" href="https://github.com"&gt;Github&lt;/a&gt;, I decided to use a private Git repo as my
source for deploying my application to Openshift. Deploying public Git
repos is &lt;a class="reference external" href="https://docs.openshift.org/latest/dev_guide/application_lifecycle/new_app.html#specifying-source-code"&gt;well-documented&lt;/a&gt;, and while private repos don't require too
much additional setup there were a few hiccups along the road, and no
great step-by-step resource. So...I decided to write my own!&lt;/p&gt;
&lt;div class="section" id="notes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Notes&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;This assumes that you already know &lt;a class="reference external" href="https://developers.openshift.com/"&gt;what Openshift is&lt;/a&gt;, and have some basic Git and web application knowledge. I essentially wrote what I wish I had read 2 days ago -- if there's any context you're missing I've tried to provide as many resources I think would be useful at the end of this article.&lt;/li&gt;
&lt;li&gt;This also assumes you're on Linux, and I am far too lazy to find how to do all of this on other systems. If these don't work on OSX or Windows, maybe you should consider a different operating system?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="overview"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Overview&lt;/a&gt;&lt;/h2&gt;
&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#notes" id="id2"&gt;Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#overview" id="id3"&gt;Overview&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#install-the-openshift-cli" id="id4"&gt;Install the Openshift CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#create-an-openshift-project" id="id5"&gt;Create an Openshift project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#pause" id="id6"&gt;Pause&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#create-an-ssh-key" id="id7"&gt;Create an SSH Key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#add-public-key-as-a-deploy-key-to-repo" id="id8"&gt;Add Public Key as a Deploy Key to Repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#add-key-as-a-secret-to-openshift" id="id9"&gt;Add Key as a Secret to Openshift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#create-openshift-application" id="id10"&gt;Create Openshift Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#make-sure-it-worked" id="id11"&gt;Make Sure It Worked&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#issues-i-ran-in-to" id="id12"&gt;Issues I Ran In To&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-wrong-git-uri" id="id13"&gt;The Wrong Git URI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#application-already-exists" id="id14"&gt;Application Already Exists&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#resources" id="id15"&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="install-the-openshift-cli"&gt;
&lt;h3&gt;&lt;a class="reference external" href="https://docs.openshift.org/latest/cli_reference/get_started_cli.html#cli-linux"&gt;Install the Openshift CLI&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Step 0 is to install the Openshift CLI. I generally find CLIs easier
to use + understand, but Openshift also has a nice GUI you can use
if you'd prefer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: this assumes that you already have access to and Openshift
instance.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/openshift/origin/releases#Downloads"&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Untar &lt;code&gt;tar -xvzf openshift-origin-client-tools-v1.5.1-7b451fc-linux-64bit.tar.gz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Move binary into path &lt;code&gt;mv openshift-origin-client-tools-v1.5.1-7b451fc-linux-64bit/oc /usr/local/bin&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you're not sure what's in your path, run &lt;code&gt;echo $PATH&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create-an-openshift-project"&gt;
&lt;h3&gt;Create an &lt;a class="reference external" href="https://docs.openshift.org/latest/dev_guide/projects.html"&gt;Openshift project&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is where our applications, builds, etc. will live. I highly
recommend running &lt;code&gt;oc new-project -h&lt;/code&gt; first to see if there are
any flags or arguments you want to pass in! I just ran &lt;code&gt;oc
new-project &amp;lt;project-name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pause"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;Pause&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Stop right here! Usually, the tutorials will tell you to make your
&lt;a class="reference external" href="https://developers.openshift.com/managing-your-applications/creating-applications.html"&gt;Openshift application&lt;/a&gt; next and pass in your Git URL. DON'T FALL FOR
IT. The problem is that for private repos, you need to have a deploy
key so Openshift can authenticate with the repo. However, the only way
to tell Openshift it needs the SSH key is in the &lt;a class="reference external" href="https://docs.openshift.org/latest/dev_guide/builds/index.html#defining-a-buildconfig"&gt;buildconfig&lt;/a&gt;. And
the buildconfig isn't generated until you either:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Try to create an application (the first build will fail then you can
modify the buildconfig) OR&lt;/li&gt;
&lt;li&gt;Have a template (basically write your own reusable buildconfig).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I ended up using a template, because it drove me nuts to have the
first build of the application fail. But you can see a &lt;a class="reference external" href="https://blog.openshift.com/using-ssh-key-for-s2i-builds/"&gt;step-by-step
guide for option 1 here&lt;/a&gt;
if you'd prefer to modify an existing buildconfig.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create-an-ssh-key"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Create an SSH Key&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Ok, so, adding a deploy key to both our Github and Openshift. First things
first, lets make a special key (Don't use your own personal SSH key!
Make a new one!)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ssh-keygen -t rsa -b 4096 -C &amp;quot;openshift-key&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Make sure you give it a unique path, so that it doesn't
overwrite any existing SSH key(s)!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="add-public-key-as-a-deploy-key-to-repo"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;Add Public Key as a Deploy Key to Repo&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now we'll add the public key to our private Git repo as a deploy key,
so that it can verify communications with Openshift. See Git's
slightly more helpful documentation on how to do this &lt;a class="reference external" href="https://developer.github.com/v3/guides/managing-deploy-keys/#deploy-keys"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Go to the repos main page in Github&lt;/li&gt;
&lt;li&gt;Click the 'Settings' tab&lt;/li&gt;
&lt;li&gt;Go to 'Deploy keys'&lt;/li&gt;
&lt;li&gt;Give it a name (can be anything)&lt;/li&gt;
&lt;li&gt;Paste the &lt;strong&gt;public&lt;/strong&gt; key (&lt;code&gt;~/.ssh/id_rsa-openshift.pub&lt;/code&gt;) into the textbox&lt;/li&gt;
&lt;li&gt;Click add key&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="add-key-as-a-secret-to-openshift"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;Add Key as a Secret to Openshift&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now we have to give Openshift the private key, and make it an
&lt;a class="reference external" href="https://docs.openshift.com/enterprise/3.0/dev_guide/secrets.html"&gt;Openshift secret&lt;/a&gt;. Openshift secrets &amp;quot;decouple sensitive content
from the pods that use it and can be mounted into containers using a
volume plug-in or used by the system to perform actions on behalf of a
pod&amp;quot;, which is very useful!  Creating them requires a few steps (read
more about why in &lt;a class="reference external" href="https://blog.openshift.com/deploying-from-private-git-repositories/"&gt;this poorly named blog post&lt;/a&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc secrets new-sshauth openshiftkey --ssh-privatekey=$HOME/.ssh/id_rsa-openshift
oc secrets add serviceaccount/builder secrets/openshiftkey
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you accidentally add the public key like I did, you can remove
secrets using &lt;code&gt;oc delete secret openshiftkey&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create-openshift-application"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id10"&gt;Create Openshift Application&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Ok, &lt;em&gt;now&lt;/em&gt; that our keys are all squared away, we can create an
application using a private git repo as our source! Unfortunately,
there's currently no way to use the &lt;code&gt;oc new-app&lt;/code&gt; command
directly to build an image from a private repo. What we'll do instead
is create an &lt;a class="reference external" href="https://docs.openshift.org/latest/dev_guide/templates.html"&gt;application template&lt;/a&gt; that includes the necessary
secret and use that template to create our app.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Create a template for our git repo using the new-app command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc new-app ssh://git@github.com:mygituser/mygitrepo --name app-name -o json &amp;gt;&amp;gt; my-template.json
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Open the JSON file and change &amp;quot;List&amp;quot; to &amp;quot;Template&amp;quot;, and &amp;quot;items&amp;quot; to &amp;quot;objects&amp;quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Add a &lt;code&gt;&amp;quot;name&amp;quot;: &amp;quot;my-app-name&amp;quot;&lt;/code&gt; to the &lt;code&gt;metadata&lt;/code&gt; object&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;metadata&amp;quot;: {&amp;quot;name&amp;quot;: &amp;quot;my-app-name&amp;quot;},
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;This part is tricky and I'm not sure how best to describe it, but in &lt;code&gt;&amp;quot;spec&amp;quot;: {&amp;quot;source&amp;quot;:{}}&lt;/code&gt; object add&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;sourceSecret&amp;quot;: {
    &amp;quot;name&amp;quot;: &amp;quot;openshiftkey&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So you should end up with a block that looks like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;spec&amp;quot;: {
...
    &amp;quot;source&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;Git&amp;quot;,
        &amp;quot;git&amp;quot;: {
            &amp;quot;uri&amp;quot;:&amp;quot;ssh://git@github.com/puppetlabs/pe-console-ui-code-coverage&amp;quot;
        },
        &amp;quot;sourceSecret&amp;quot;: { &amp;quot;name&amp;quot;: &amp;quot;openshiftkey&amp;quot; }
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://gist.github.com/lucywyman/145aebfe1897d91d4cd5337e5baa7379"&gt;This is what my JSON template ended up looking like&lt;/a&gt; (with sensitive
information removed)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Create a template based on this json file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc create -f my-template.json
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Finally, create an application using the template!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc new-app --template app-name
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Again, I highly recommend you run &lt;code&gt;oc new-app -h&lt;/code&gt; first to see if there are any special configurations you want to use.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="make-sure-it-worked"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;Make Sure It Worked&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Run &lt;code&gt;oc get builds&lt;/code&gt;, and you should see output similar to this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NAME      TYPE      FROM          STATUS     STARTED        DURATION
my-app1   Source    Git@abcdefg   Complete   18 hours ago   29s
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="issues-i-ran-in-to"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;Issues I Ran In To&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="the-wrong-git-uri"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id13"&gt;The Wrong Git URI&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At first I was using the http Git URI, which obviously didn't use
the SSH deploy key. I then tried using
&lt;code&gt;ssh://git&amp;#64;github.com:my-user/my-repo.git&lt;/code&gt;, which also failed.
&lt;code&gt;git&amp;#64;github.com:my-user/my-repo.git&lt;/code&gt; is the right URI!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="application-already-exists"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id14"&gt;Application Already Exists&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Because I had to try building my application several times, I also had
to delete my failed attempts several times so there wouldn't be name
errors. I usually ran the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;oc delete all --selector app=app-name
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should delete all resources for the app&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;Resources&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;a class="reference external" href="https://docs.openshift.org/latest/welcome/index.html"&gt;Openshift Origin&lt;/a&gt; documentation was invaluable in
troubleshooting various issues I had&lt;/li&gt;
&lt;li&gt;I asked a question in #openshift on irc, and someone answered within
5 minutes and was very nice and helpful.&lt;/li&gt;
&lt;li&gt;There's a &lt;a class="reference external" href="https://openshift.com/promotions/for-developers.html"&gt;Free E-Book&lt;/a&gt; (pdf format too) call &amp;quot;Openshift for
Developer's&amp;quot; that explains more about what Openshift is and how it
works. This was super helpful for understanding what all of the
components were, and generally getting started.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="tech"></category><category term="openshift"></category></entry><entry><title>Setting a Language with Selenium Webdriver in Ruby</title><link href="http://blog.lucywyman.me/setting-a-language-with-selenium-webdriver-in-ruby.html" rel="alternate"></link><published>2017-01-23T00:00:00-08:00</published><updated>2017-01-23T00:00:00-08:00</updated><author><name>Lucy Wyman</name></author><id>tag:blog.lucywyman.me,2017-01-23:/setting-a-language-with-selenium-webdriver-in-ruby.html</id><summary type="html">&lt;p&gt;Hello reader! This post was inspired by a project I was working on
recently, adding a 'lang' option to a &lt;a class="reference external" href="https://rubygems.org/gems/selenium-webdriver/versions/2.53.4"&gt;Selenium-Webdriver&lt;/a&gt; (the ruby
gem) wrapper. I needed to instantiate
&lt;a class="reference external" href="http://www.rubydoc.info/gems/selenium-webdriver/0.0.28/Selenium/WebDriver/Driver"&gt;Selenium::Webdriver&lt;/a&gt;.for(:firefox) and (:chrome) both locally and
remotely (Sauce labs, specifically), setting a locale
for each.  There's plenty of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello reader! This post was inspired by a project I was working on
recently, adding a 'lang' option to a &lt;a class="reference external" href="https://rubygems.org/gems/selenium-webdriver/versions/2.53.4"&gt;Selenium-Webdriver&lt;/a&gt; (the ruby
gem) wrapper. I needed to instantiate
&lt;a class="reference external" href="http://www.rubydoc.info/gems/selenium-webdriver/0.0.28/Selenium/WebDriver/Driver"&gt;Selenium::Webdriver&lt;/a&gt;.for(:firefox) and (:chrome) both locally and
remotely (Sauce labs, specifically), setting a locale
for each.  There's plenty of documentation on how to do this in
&lt;a class="reference external" href="http://stackoverflow.com/questions/18645205/set-chromes-language-using-selenium-chromedriver"&gt;Java&lt;/a&gt;, &lt;a class="reference external" href="http://sqa.stackexchange.com/questions/9904/how-to-set-browser-locale-with-chromedriver-python"&gt;C&lt;/a&gt;, and even &lt;a class="reference external" href="http://sqa.stackexchange.com/questions/9904/how-to-set-browser-locale-with-chromedriver-python"&gt;Python&lt;/a&gt;, but it was hard to find the right
way to do it using the ruby gem. So here's what worked for me, where
&lt;code&gt;&amp;#64;&amp;#64;sweep_options[:lang]&lt;/code&gt; is just a variable that holds either
'en-us' or 'ja' (as strings).&lt;/p&gt;
&lt;div class="section" id="locally"&gt;
&lt;h2&gt;Locally&lt;/h2&gt;
&lt;div class="section" id="firefox"&gt;
&lt;h3&gt;Firefox&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;firefox_profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Selenium&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;WebDriver&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Firefox&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Profile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;
&lt;span class="n"&gt;firefox_profile&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;intl.accept_languages&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vc"&gt;@@sweep_options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:lang&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="no"&gt;Selenium&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;WebDriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:firefox&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="ss"&gt;:http_client&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="ss"&gt;:profile&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;firefox_profile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="chrome"&gt;
&lt;h3&gt;Chrome&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;chrome_prefs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;:lang&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="vc"&gt;@@sweep_options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:lang&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="no"&gt;Selenium&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;WebDriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:chrome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="ss"&gt;:http_client&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="ss"&gt;:prefs&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;chrome_prefs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="ss"&gt;:desired_capabilities&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;caps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="remotely"&gt;
&lt;h2&gt;Remotely&lt;/h2&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;Firefox&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;firefox_profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Selenium&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;WebDriver&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Firefox&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Profile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;
&lt;span class="n"&gt;firefox_profile&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;intl.accept_languages&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vc"&gt;@@sweep_options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:lang&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;caps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Selenium&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;WebDriver&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Remote&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Capabilities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;firefox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:firefox_profile&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;firefox_profile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sweep_driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Selenium&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;WebDriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="ss"&gt;:remote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:http_client&lt;/span&gt;          &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:url&lt;/span&gt;                  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:desired_capabilities&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;caps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;Chrome&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;caps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Selenium&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;WebDriver&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Remote&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Capabilities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chromeOptions&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
                                                 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;args&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--lang=&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vc"&gt;@@sweep_options&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:lang&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;sweep_driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Selenium&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;WebDriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="ss"&gt;:remote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:http_client&lt;/span&gt;          &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:url&lt;/span&gt;                  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:desired_capabilities&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;caps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://sites.google.com/a/chromium.org/chromedriver/capabilities"&gt;https://sites.google.com/a/chromium.org/chromedriver/capabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities"&gt;https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="tech"></category><category term="ruby"></category><category term="selenium"></category></entry><entry><title>Puppet Orchestrator --application Example</title><link href="http://blog.lucywyman.me/puppet-orchestrator-application-flag.html" rel="alternate"></link><published>2016-10-26T00:00:00-07:00</published><updated>2016-10-26T00:00:00-07:00</updated><author><name>Lucy Wyman</name></author><id>tag:blog.lucywyman.me,2016-10-26:/puppet-orchestrator-application-flag.html</id><summary type="html">&lt;p&gt;As always, this technical blog post began when I was having a problem
and couldn't find the answer on the internet.  I'm writing tests for
Puppet's &lt;a class="reference external" href="https://docs.puppet.com/pe/latest/app_orchestration_overview.html"&gt;application orchestrator&lt;/a&gt; which involve setting up an
application remotely then running some variations of &lt;code&gt;puppet job
run&lt;/code&gt;.  In particular, I need to specify an …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As always, this technical blog post began when I was having a problem
and couldn't find the answer on the internet.  I'm writing tests for
Puppet's &lt;a class="reference external" href="https://docs.puppet.com/pe/latest/app_orchestration_overview.html"&gt;application orchestrator&lt;/a&gt; which involve setting up an
application remotely then running some variations of &lt;code&gt;puppet job
run&lt;/code&gt;.  In particular, I need to specify an environment (&lt;code&gt;-e or
--environment&lt;/code&gt;) and an application instance (&lt;code&gt;-a or
--application&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Here's my directory structure:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
[root&amp;#64;hostname environments]# tree
.
├── production
│&amp;nbsp;&amp;nbsp; ├── environment.conf
│&amp;nbsp;&amp;nbsp; ├── hieradata
│&amp;nbsp;&amp;nbsp; ├── manifests
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── site.pp
│&amp;nbsp;&amp;nbsp; └── modules
└── tmpenv
    ├── manifests
    │&amp;nbsp;&amp;nbsp; └── site.pp
    └── modules
        ├── app_one
        │&amp;nbsp;&amp;nbsp; ├── manifests
        │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── db_component.pp
        │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── init.pp
        │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── web_component.pp
        │&amp;nbsp;&amp;nbsp; └── README.md
        ├── README.md
        └── shared_types_and_providers
            └── lib
                └── puppet
                    ├── provider
                    │&amp;nbsp;&amp;nbsp; ├── testhttp
                    │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── test_file.rb
                    │&amp;nbsp;&amp;nbsp; └── testsql
                    │&amp;nbsp;&amp;nbsp;     └── test_file.rb
                    └── type
                        ├── testhttp.rb
                        └── testsql.rb
&lt;/pre&gt;
&lt;p&gt;And the output of running &lt;code&gt;puppet app show -e tmpenv&lt;/code&gt; is:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
App_one[Health Check Test]
    App_one::Db_component[Health Check Test] =&amp;gt; y21898u9zb3yin5.delivery.puppetlabs.net
        + produces Testsql[Health Check Test]
    App_one::Web_component[Health Check Test] =&amp;gt; hzmjunpoua0mxeo.delivery.puppetlabs.net
        consumes Testsql[Health Check Test]
&lt;/pre&gt;
&lt;p&gt;Ok, so, as I see it there are 2 strong candidates for what the
&amp;quot;&amp;lt;APPLICATION&amp;gt;&amp;quot; referred to in the &lt;a class="reference external" href="https://docs.puppet.com/pe/latest/orchestrator_job_run.html"&gt;puppet orchestrator
documentation&lt;/a&gt; could be: &lt;strong&gt;app_one&lt;/strong&gt; or &lt;strong&gt;App_one[Health Check
Test]&lt;/strong&gt;. Here's the output for each of those (using puppet job plan so
that I'm not creating new job id's and logs all over the place):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
[root&amp;#64;hostname environments]# puppet job plan -e tmpenv -a app_one
Failed to submit plan: puppetlabs.orchestrator/unknown-target: The target was not found in environment tmpenv: app_one

[root&amp;#64;hostname environments]# puppet job plan -e tmpenv -a App_one[Health Check Test]
terminate called after throwing an instance of 'HorseWhisperer::action_validation_error' what():  Validation Error: You supplied too many arguments to the run command. Only 1 is allowed.
  Aborted
&lt;/pre&gt;
&lt;p&gt;In desperation, I decide to try a combination of the two &lt;strong&gt;App_one&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
[root&amp;#64;hostname environments]# puppet job plan -e tmpenv -a
App_one
+-------------------+---------+
| Environment       | tmpenv  |
| Target            | App_one |
| Concurrency Limit | None    |
| Nodes             | 2       |
+-------------------+---------+

Application instances: 1
  - App_one[Health Check Test]

Node run order (nodes in level 0 run before their dependent nodes in
level 1, etc.):
0 -----------------------------------------------------------------------
y21898u9zb3yin5.delivery.puppetlabs.net
    App_one[Health Check Test] - App_one::Db_component[Health Check
    Test]

1 -----------------------------------------------------------------------
hzmjunpoua0mxeo.delivery.puppetlabs.net
    App_one[Health Check Test] - App_one::Web_component[Health
    Check Test]

Use `puppet job run --application 'App_one' --environment
tmpenv` to create and run a job like this.
Node catalogs may have changed since this plan was
generated.
&lt;/pre&gt;
&lt;p&gt;Success!  I later discovered that &lt;code&gt;puppet job plan -e tmpenv -a
&amp;quot;App_one[Health Check Test]&amp;quot;&lt;/code&gt; also worked.  It's still unclear to me
why the name needs be capitalized, but I trust that there are good and
well thought out Reasons which just aren't documented.&lt;/p&gt;
&lt;p&gt;So, if you don't know, now you know :)&lt;/p&gt;
</content><category term="tech"></category><category term="puppet"></category><category term="application"></category><category term="orchestrator"></category><category term="flag"></category><category term="example"></category></entry><entry><title>Minimal Programmatic Puppet Class Creation</title><link href="http://blog.lucywyman.me/programmatic-class-creation.html" rel="alternate"></link><published>2016-10-13T00:00:00-07:00</published><updated>2016-10-13T00:00:00-07:00</updated><author><name>Lucy Wyman</name></author><id>tag:blog.lucywyman.me,2016-10-13:/programmatic-class-creation.html</id><summary type="html">&lt;p&gt;This post began when I was trying to programmatically create my own
Puppet class, googled this exact title, and came up totally empty
handed. After wading through dozens of StackOverflow posts and puppet
docs, I still wasn't sure what I needed to accomplish this or how it
would fit into …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post began when I was trying to programmatically create my own
Puppet class, googled this exact title, and came up totally empty
handed. After wading through dozens of StackOverflow posts and puppet
docs, I still wasn't sure what I needed to accomplish this or how it
would fit into our Beaker tests. I admittedly don't have much
experience with Puppet, and ended up spending a few hours with a
coworker learning about the most efficient way to achieve this.  This
is essentially the post I wish I had found a week ago (or will wish
existed 6 months from now when I need to do the same thing and have
forgotten all of this).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: This post is for n00bs, not l33t
puppet haxxors.  You've been warned.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OTHER WARNING&lt;/strong&gt;: This post assumes that you already have a
remote puppet master, and are most likely using Beaker or some other
testing harness to interact with that master. You'll also need to make
sure $test_harness has root privileges on the master, as you'll be
writing to &lt;code&gt;/etc&lt;/code&gt;.&lt;/p&gt;
&lt;div class="section" id="the-endgame"&gt;
&lt;h2&gt;The Endgame&lt;/h2&gt;
&lt;p&gt;Specifically, I wanted to ensure that a UTF-8 encoded class (with non
&lt;code&gt;\A[a-z][a-z0-9_]*\Z&lt;/code&gt; characters) would not be displayed in the
Puppet Enterprise GUI (per &lt;a class="reference external" href="https://docs.puppet.com/puppet/latest/reference/lang_reserved.html#acceptable-characters-in-names"&gt;Puppet's acceptable character specs&lt;/a&gt;).  I
needed a bare module with a single class that I could programmatically
throw at a master, and then verify had successfully been applied.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-solution-s"&gt;
&lt;h2&gt;The Solution(s)&lt;/h2&gt;
&lt;p&gt;Since it's impossible to verify that the unicode isn't showing up
because it's unicode, and not because I goofed on adding the class
(yeah, yeah, our logging could be improved), I first needed to get
this test working with a kosher name.&lt;/p&gt;
&lt;div class="section" id="files"&gt;
&lt;h3&gt;Files&lt;/h3&gt;
&lt;p&gt;Ok, so really the crux of this problems is what files you need, and
where they need to go on your system.  Since this requires just &lt;em&gt;the one
class&lt;/em&gt;, and none of the other infra around puppetized applications,
only a simple &lt;code&gt;init.pp&lt;/code&gt; is necessary.  Mine looks like this:&lt;/p&gt;
&lt;pre class="code puppet literal-block"&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="na"&gt;myclass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;file&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;'/tmp/make_sure_this_exists'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;ensure&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;present&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;A few important notes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;No trailing whitespace! Anywhere!&lt;/li&gt;
&lt;li&gt;2 spaces, not tab characters&lt;/li&gt;
&lt;li&gt;Single quotes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are &lt;a class="reference external" href="https://docs.puppet.com/guides/style_guide.html"&gt;more official style guideline&lt;/a&gt;, and even a
&lt;a class="reference external" href="http://puppet-lint.com/"&gt;puppet-linter&lt;/a&gt; you can use to verify your &lt;code&gt;init.pp&lt;/code&gt; is
correct.&lt;/p&gt;
&lt;p&gt;Ok, so we've got this file, where does it go on the master?  As far as
I can tell most Puppet-y things that we humans deal with live in
&lt;code&gt;/etc/puppetlabs/code/environments&lt;/code&gt;, and since we're taking the
easy road here we're going to be working in the &lt;code&gt;production&lt;/code&gt;
environment. Before you do anything that directory should look
something like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
.
└── production
    ├── environment.conf
    ├── hieradata
    ├── manifests
    │&amp;nbsp;&amp;nbsp; └── site.pp
    └── modules
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Modules&lt;/strong&gt; is going to be the directory we need to work with.  A
puppet module is a self-contained bundle of code you use to tell
puppet some part of how you want your system to look. There are huge,
widely used puppet modules such as &lt;a class="reference external" href="https://forge.puppet.com/puppetlabs/apache"&gt;Apache&lt;/a&gt;, or there are cute little
5-line modules like ours, and both specify various related aspects of
a system state to achieve a goal.  That's as much as I'll say about
modules, but you can &lt;a class="reference external" href="https://docs.puppet.com/puppet/latest/reference/modules_fundamentals.html"&gt;read more here&lt;/a&gt; if interested.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: In order for agents to be classified by this class, it needs
to go on the master.  This might not be strictly true all of the time,
but it definitely wasn't going to show up in the GUI or get applied to
agents from another agent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="doing-the-thing-manually"&gt;
&lt;h3&gt;Doing the Thing Manually&lt;/h3&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Make the directory&lt;/strong&gt;. To make our module, we'll need to make the
following directory from the &lt;code&gt;production&lt;/code&gt; directory:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code literal-block"&gt;
mkdir -p modules/myclass/manifests`
&lt;/pre&gt;
&lt;p&gt;where &lt;code&gt;myclass&lt;/code&gt; matches the class name you have in your
&lt;code&gt;init.pp&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Copy the file&lt;/strong&gt;. Then put the &lt;code&gt;init.pp&lt;/code&gt; in that directory,
and your set!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Verify it worked&lt;/strong&gt;. There are a few ways to verify that you were
successful:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;SSH into the master, run &lt;code&gt;puppet agent -t&lt;/code&gt;, then SSH into your
agent and verify that the file &lt;code&gt;/tmp/make_sure_this_exists&lt;/code&gt;
does indeed exist&lt;/li&gt;
&lt;li&gt;In the GUI, head to Nodes &amp;gt; Classification, create a new group, then
go to $node_group_page &amp;gt; classes tab and verify your class is in the
dropdown for adding a class.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="automate-it"&gt;
&lt;h2&gt;Automate it&lt;/h2&gt;
&lt;p&gt;So now that we know what we're doing, automating it with Beaker is
pretty easy, especially if we're working in the production
environment.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Make the directory&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="vi"&gt;&amp;#64;class_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'classy'&lt;/span&gt;
&lt;span class="vi"&gt;&amp;#64;modules_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/etc/puppetlabs/code/environments/production/modules/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;&amp;#64;class_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/manifests&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mkdir -p &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;&amp;#64;modules_path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Copy the file&lt;/strong&gt;. Please note, I needed to define my
&lt;code&gt;init.pp&lt;/code&gt; content inside the file for reasons, but you can
also have a local file and use ruby to read from it, which is a
little more best-practice-y. Also note that you'll need to give the
file proper permissions once you've made it!&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
  &lt;span class="n"&gt;manifest&lt;/span&gt; &lt;span class="o"&gt;=&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class="sh"&gt;&lt;/span&gt;&lt;span class="dl"&gt;EOS&lt;/span&gt;&lt;span class="sh"&gt;&lt;/span&gt;
&lt;span class="sh"&gt;class #{&amp;#64;class_name} {
  file { '/tmp/make_sure_this_exists':
    ensure =&amp;gt; present
  }
}
&lt;/span&gt;&lt;span class="dl"&gt;  EOS
&lt;/span&gt;  &lt;span class="n"&gt;create_remote_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;&amp;#64;modules_path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/init.pp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;manifest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;chmod 644 &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;&amp;#64;modules_path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/init.pp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Verify that it worked&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'puppet agent -t'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;agents&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;not_controller&lt;/span&gt; &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;ls_output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'ls /tmp/make_sure_this_exists'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;
&lt;span class="n"&gt;assert_equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ls_output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'/tmp/make_sure_this_exists'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error_message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are lots of ways to verify that it worked, this runs
&lt;code&gt;puppet agent -t&lt;/code&gt; on the master (which compiles the catalog and
applies it to all the agents), then verifies that the output of 'ls'
on the master includes the file our class put there.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Hopefully this was helpful and what you are looking for! This is
really the &lt;em&gt;bare minimum&lt;/em&gt;, need-to-know-basis level of creating a
custom class, for when you just need to get the thing done and don't
want to learn &lt;strong&gt;All Of Puppet&lt;/strong&gt;.  If you do want to learn all of
puppet though, there are some links below!  Enjoy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="puppet-resources"&gt;
&lt;h2&gt;Puppet Resources&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://puppet.com/download-learning-vm"&gt;Learning VM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.example42.com/tutorials/PuppetTutorial/#slide-0"&gt;Puppet Tutorial&lt;/a&gt; slide deck by Alessandro Franceschi&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://sysadmincasts.com/episodes/8-learning-puppet-with-vagrant"&gt;Learn Puppet with Vagrant&lt;/a&gt; by Justin Weissig&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.pindi.us/blog/getting-started-puppet"&gt;Getting Started with Puppet&lt;/a&gt; by Pindi Albert&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="tech"></category><category term="puppet"></category></entry><entry><title>Openstack Image Default Username Reference</title><link href="http://blog.lucywyman.me/openstack-image-default-username-reference.html" rel="alternate"></link><published>2016-09-06T00:00:00-07:00</published><updated>2016-09-06T00:00:00-07:00</updated><author><name>Lucy Wyman</name></author><id>tag:blog.lucywyman.me,2016-09-06:/openstack-image-default-username-reference.html</id><summary type="html">&lt;p&gt;This seems like something that should exist on the internet and kind of
doesn't (or should at least be more searchable). These are only valid if you
obtain an official image from the respective projects repository, and may or
may not be the same if you use a manual image …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This seems like something that should exist on the internet and kind of
doesn't (or should at least be more searchable). These are only valid if you
obtain an official image from the respective projects repository, and may or
may not be the same if you use a manual image.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="45%" /&gt;
&lt;col width="55%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Image&lt;/th&gt;
&lt;th class="head"&gt;Default Username&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;centos_(6|7)_x86_64&lt;/td&gt;
&lt;td&gt;centos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;cirros_0.3.[0-4]_x86_64&lt;/td&gt;
&lt;td&gt;cirros&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;debian_8.2.0_x86_64&lt;/td&gt;
&lt;td&gt;debian&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ubuntu_1(4|6).04_x86_64&lt;/td&gt;
&lt;td&gt;ubuntu&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;fedora_23_x86_64&lt;/td&gt;
&lt;td&gt;fedora&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;rhel_7.2_x86_64&lt;/td&gt;
&lt;td&gt;cloud-user (snowflake much?)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;coreos_(version)_x86_64&lt;/td&gt;
&lt;td&gt;core&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;If you're still not sure, I tend to find which user Openstack wants me to use by trying to login to the instance as root, and get a message similar to:
&lt;tt class="docutils literal"&gt;`
Please login as the user &lt;span class="pre"&gt;&amp;quot;cloud-user&amp;quot;&lt;/span&gt; rather than the user &amp;quot;root&amp;quot;.
Connection to 10.32.161.253 closed.
`&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Source: &lt;a class="reference external" href="http://docs.openstack.org/image-guide/obtain-images.html"&gt;http://docs.openstack.org/image-guide/obtain-images.html&lt;/a&gt;&lt;/p&gt;
</content><category term="tech"></category><category term="openstack"></category></entry><entry><title>Apps I Love</title><link href="http://blog.lucywyman.me/apps-to-love.html" rel="alternate"></link><published>2016-03-19T00:00:00-07:00</published><updated>2016-03-19T00:00:00-07:00</updated><author><name>Lucy Wyman</name></author><id>tag:blog.lucywyman.me,2016-03-19:/apps-to-love.html</id><summary type="html">&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;picture of me w/ phone&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;With so many applications out there, it's difficult to discern which are
valuable, usable, and do what you expect them to.  So, for the sake
of those like me, here are some of the applications I have found
particularly useful or entertaining. I should …&lt;/p&gt;</summary><content type="html">&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;picture of me w/ phone&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;With so many applications out there, it's difficult to discern which are
valuable, usable, and do what you expect them to.  So, for the sake
of those like me, here are some of the applications I have found
particularly useful or entertaining. I should also mention that these are
all free and available on Android.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://multco.lib.overdrive.com"&gt;Overdrive&lt;/a&gt;: You can connect overdrive to local libraries and checkout
books to read or listen to on mobile. I use it to download and listen to
audiobooks, and honestly went from reading 0 books/year to about 1/week.
It's completely changed my life, and made the mundane moments like doing
laundry or walking to class more entertaining.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=de.danoeh.antennapod&amp;amp;hl=en"&gt;AntennaPod&lt;/a&gt;: Similar to Overdrive, this app brings you great listening
material in a different form: podcasts.  It has lots of fancy features now
like adjustable playback speed, automatic deletion once you've listened
to an episode, and turning off if you fall asleep.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=another.music.player&amp;amp;hl=en"&gt;Shuttle&lt;/a&gt;: This is just a music player I'm happy with. If you're happy
with your music player, I wouldn't worry about it.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.wb.headsup&amp;amp;hl=en"&gt;Heads up&lt;/a&gt;: This a fun &amp;quot;We're waiting for something and need to pass
the time&amp;quot; app. It's especially great with kids.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.mint&amp;amp;hl=en"&gt;Mint&lt;/a&gt;: I use this mostly to set and maintain budgets. You need to give it
some very personal banking information, so if you're not into that this isn't
for you, but if you are I've found it very useful. You can even see your
credit score on it, which is always good to know!&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.duolingo.com/"&gt;Duolingo&lt;/a&gt;: You've more than likely already heard of this, but if not
it's an addictive, gamified way of learning new languages.&lt;/li&gt;
&lt;/ol&gt;
</content><category term="loves"></category><category term="tech"></category></entry></feed>