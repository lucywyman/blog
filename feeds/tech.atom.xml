<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>blog</title><link href="http://blog.lucywyman.me/" rel="alternate"></link><link href="http://blog.lucywyman.me/feeds/tech.atom.xml" rel="self"></link><id>http://blog.lucywyman.me/</id><updated>2016-10-26T00:00:00-07:00</updated><entry><title>Puppet Orchestrator --application Example</title><link href="http://blog.lucywyman.me/puppet-orchestrator-application-flag.html" rel="alternate"></link><published>2016-10-26T00:00:00-07:00</published><updated>2016-10-26T00:00:00-07:00</updated><author><name>Lucy Wyman</name></author><id>tag:blog.lucywyman.me,2016-10-26:puppet-orchestrator-application-flag.html</id><summary type="html">&lt;p&gt;As always, this technical blog post began when I was having a problem
and couldn't find the answer on the internet.  I'm writing tests for
Puppet's &lt;a class="reference external" href="https://docs.puppet.com/pe/latest/app_orchestration_overview.html"&gt;application orchestrator&lt;/a&gt; which involve setting up an
application remotely then running some variations of &lt;code&gt;puppet job
run&lt;/code&gt;.  In particular, I need to specify an environment (&lt;code&gt;-e or
--environment&lt;/code&gt;) and an application instance (&lt;code&gt;-a or
--application&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Here's my directory structure:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
[root&amp;#64;hostname environments]# tree
.
├── production
│&amp;nbsp;&amp;nbsp; ├── environment.conf
│&amp;nbsp;&amp;nbsp; ├── hieradata
│&amp;nbsp;&amp;nbsp; ├── manifests
│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── site.pp
│&amp;nbsp;&amp;nbsp; └── modules
└── tmpenv
    ├── manifests
    │&amp;nbsp;&amp;nbsp; └── site.pp
    └── modules
        ├── app_one
        │&amp;nbsp;&amp;nbsp; ├── manifests
        │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── db_component.pp
        │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── init.pp
        │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── web_component.pp
        │&amp;nbsp;&amp;nbsp; └── README.md
        ├── README.md
        └── shared_types_and_providers
            └── lib
                └── puppet
                    ├── provider
                    │&amp;nbsp;&amp;nbsp; ├── testhttp
                    │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── test_file.rb
                    │&amp;nbsp;&amp;nbsp; └── testsql
                    │&amp;nbsp;&amp;nbsp;     └── test_file.rb
                    └── type
                        ├── testhttp.rb
                        └── testsql.rb
&lt;/pre&gt;
&lt;p&gt;And the output of running &lt;code&gt;puppet app show -e tmpenv&lt;/code&gt; is:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
App_one[Health Check Test]
    App_one::Db_component[Health Check Test] =&amp;gt; y21898u9zb3yin5.delivery.puppetlabs.net
        + produces Testsql[Health Check Test]
    App_one::Web_component[Health Check Test] =&amp;gt; hzmjunpoua0mxeo.delivery.puppetlabs.net
        consumes Testsql[Health Check Test]
&lt;/pre&gt;
&lt;p&gt;Ok, so, as I see it there are 2 strong candidates for what the
&amp;quot;&amp;lt;APPLICATION&amp;gt;&amp;quot; referred to in the &lt;a class="reference external" href="https://docs.puppet.com/pe/latest/orchestrator_job_run.html"&gt;puppet orchestrator
documentation&lt;/a&gt; could be: &lt;strong&gt;app_one&lt;/strong&gt; or &lt;strong&gt;App_one[Health Check
Test]&lt;/strong&gt;. Here's the output for each of those (using puppet job plan so
that I'm not creating new job id's and logs all over the place):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
[root&amp;#64;hostname environments]# puppet job plan -e tmpenv -a app_one
Failed to submit plan: puppetlabs.orchestrator/unknown-target: The target was not found in environment tmpenv: app_one

[root&amp;#64;hostname environments]# puppet job plan -e tmpenv -a App_one[Health Check Test]
terminate called after throwing an instance of 'HorseWhisperer::action_validation_error' what():  Validation Error: You supplied too many arguments to the run command. Only 1 is allowed.
  Aborted
&lt;/pre&gt;
&lt;p&gt;In desperation, I decide to try a combination of the two &lt;strong&gt;App_one&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
[root&amp;#64;hostname environments]# puppet job plan -e tmpenv -a
App_one
+-------------------+---------+
| Environment       | tmpenv  |
| Target            | App_one |
| Concurrency Limit | None    |
| Nodes             | 2       |
+-------------------+---------+

Application instances: 1
  - App_one[Health Check Test]

Node run order (nodes in level 0 run before their dependent nodes in
level 1, etc.):
0 -----------------------------------------------------------------------
y21898u9zb3yin5.delivery.puppetlabs.net
    App_one[Health Check Test] - App_one::Db_component[Health Check
    Test]

1 -----------------------------------------------------------------------
hzmjunpoua0mxeo.delivery.puppetlabs.net
    App_one[Health Check Test] - App_one::Web_component[Health
    Check Test]

Use `puppet job run --application 'App_one' --environment
tmpenv` to create and run a job like this.
Node catalogs may have changed since this plan was
generated.
&lt;/pre&gt;
&lt;p&gt;Success!  I later discovered that &lt;code&gt;puppet job plan -e tmpenv -a
&amp;quot;App_one[Health Check Test]&amp;quot;&lt;/code&gt; also worked.  It's still unclear to me
why the name needs be capitalized, but I trust that there are good and
well thought out Reasons which just aren't documented.&lt;/p&gt;
&lt;p&gt;So, if you don't know, now you know :)&lt;/p&gt;
</summary><category term="tech"></category><category term="puppet"></category><category term="application"></category><category term="orchestrator"></category><category term="flag"></category><category term="example"></category></entry><entry><title>Minimal Programmatic Puppet Class Creation</title><link href="http://blog.lucywyman.me/programmatic-class-creation.html" rel="alternate"></link><published>2016-10-13T00:00:00-07:00</published><updated>2016-10-13T00:00:00-07:00</updated><author><name>Lucy Wyman</name></author><id>tag:blog.lucywyman.me,2016-10-13:programmatic-class-creation.html</id><summary type="html">&lt;p&gt;This post began when I was trying to programmatically create my own
Puppet class, googled this exact title, and came up totally empty
handed. After wading through dozens of StackOverflow posts and puppet
docs, I still wasn't sure what I needed to accomplish this or how it
would fit into our Beaker tests. I admittedly don't have much
experience with Puppet, and ended up spending a few hours with a
coworker learning about the most efficient way to achieve this.  This
is essentially the post I wish I had found a week ago (or will wish
existed 6 months from now when I need to do the same thing and have
forgotten all of this).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: This post is for n00bs, not l33t
puppet haxxors.  You've been warned.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OTHER WARNING&lt;/strong&gt;: This post assumes that you already have a
remote puppet master, and are most likely using Beaker or some other
testing harness to interact with that master. You'll also need to make
sure $test_harness has root privileges on the master, as you'll be
writing to &lt;code&gt;/etc&lt;/code&gt;.&lt;/p&gt;
&lt;div class="section" id="the-endgame"&gt;
&lt;h2&gt;The Endgame&lt;/h2&gt;
&lt;p&gt;Specifically, I wanted to ensure that a UTF-8 encoded class (with non
&lt;code&gt;\A[a-z][a-z0-9_]*\Z&lt;/code&gt; characters) would not be displayed in the
Puppet Enterprise GUI (per &lt;a class="reference external" href="https://docs.puppet.com/puppet/latest/reference/lang_reserved.html#acceptable-characters-in-names"&gt;Puppet's acceptable character specs&lt;/a&gt;).  I
needed a bare module with a single class that I could programmatically
throw at a master, and then verify had successfully been applied.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-solution-s"&gt;
&lt;h2&gt;The Solution(s)&lt;/h2&gt;
&lt;p&gt;Since it's impossible to verify that the unicode isn't showing up
because it's unicode, and not because I goofed on adding the class
(yeah, yeah, our logging could be improved), I first needed to get
this test working with a kosher name.&lt;/p&gt;
&lt;div class="section" id="files"&gt;
&lt;h3&gt;Files&lt;/h3&gt;
&lt;p&gt;Ok, so really the crux of this problems is what files you need, and
where they need to go on your system.  Since this requires just &lt;em&gt;the one
class&lt;/em&gt;, and none of the other infra around puppetized applications,
only a simple &lt;code&gt;init.pp&lt;/code&gt; is necessary.  Mine looks like this:&lt;/p&gt;
&lt;pre class="code puppet literal-block"&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="na"&gt;myclass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;file&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;'/tmp/make_sure_this_exists'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;ensure&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;present&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;A few important notes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;No trailing whitespace! Anywhere!&lt;/li&gt;
&lt;li&gt;2 spaces, not tab characters&lt;/li&gt;
&lt;li&gt;Single quotes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are &lt;a class="reference external" href="https://docs.puppet.com/guides/style_guide.html"&gt;more official style guideline&lt;/a&gt;, and even a
&lt;a class="reference external" href="http://puppet-lint.com/"&gt;puppet-linter&lt;/a&gt; you can use to verify your &lt;code&gt;init.pp&lt;/code&gt; is
correct.&lt;/p&gt;
&lt;p&gt;Ok, so we've got this file, where does it go on the master?  As far as
I can tell most Puppet-y things that we humans deal with live in
&lt;code&gt;/etc/puppetlabs/code/environments&lt;/code&gt;, and since we're taking the
easy road here we're going to be working in the &lt;code&gt;production&lt;/code&gt;
environment. Before you do anything that directory should look
something like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
.
└── production
    ├── environment.conf
    ├── hieradata
    ├── manifests
    │&amp;nbsp;&amp;nbsp; └── site.pp
    └── modules
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Modules&lt;/strong&gt; is going to be the directory we need to work with.  A
puppet module is a self-contained bundle of code you use to tell
puppet some part of how you want your system to look. There are huge,
widely used puppet modules such as &lt;a class="reference external" href="https://forge.puppet.com/puppetlabs/apache"&gt;Apache&lt;/a&gt;, or there are cute little
5-line modules like ours, and both specify various related aspects of
a system state to achieve a goal.  That's as much as I'll say about
modules, but you can &lt;a class="reference external" href="https://docs.puppet.com/puppet/latest/reference/modules_fundamentals.html"&gt;read more here&lt;/a&gt; if interested.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: In order for agents to be classified by this class, it needs
to go on the master.  This might not be strictly true all of the time,
but it definitely wasn't going to show up in the GUI or get applied to
agents from another agent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="doing-the-thing-manually"&gt;
&lt;h3&gt;Doing the Thing Manually&lt;/h3&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Make the directory&lt;/strong&gt;. To make our module, we'll need to make the
following directory from the &lt;code&gt;production&lt;/code&gt; directory:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code literal-block"&gt;
mkdir -p modules/myclass/manifests`
&lt;/pre&gt;
&lt;p&gt;where &lt;code&gt;myclass&lt;/code&gt; matches the class name you have in your
&lt;code&gt;init.pp&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Copy the file&lt;/strong&gt;. Then put the &lt;code&gt;init.pp&lt;/code&gt; in that directory,
and your set!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Verify it worked&lt;/strong&gt;. There are a few ways to verify that you were
successful:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;SSH into the master, run &lt;code&gt;puppet agent -t&lt;/code&gt;, then SSH into your
agent and verify that the file &lt;code&gt;/tmp/make_sure_this_exists&lt;/code&gt;
does indeed exist&lt;/li&gt;
&lt;li&gt;In the GUI, head to Nodes &amp;gt; Classification, create a new group, then
go to $node_group_page &amp;gt; classes tab and verify your class is in the
dropdown for adding a class.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="automate-it"&gt;
&lt;h2&gt;Automate it&lt;/h2&gt;
&lt;p&gt;So now that we know what we're doing, automating it with Beaker is
pretty easy, especially if we're working in the production
environment.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Make the directory&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="vi"&gt;&amp;#64;class_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'classy'&lt;/span&gt;
&lt;span class="vi"&gt;&amp;#64;modules_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/etc/puppetlabs/code/environments/production/modules/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;&amp;#64;class_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/manifests&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mkdir -p &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;&amp;#64;modules_path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Copy the file&lt;/strong&gt;. Please note, I needed to define my
&lt;code&gt;init.pp&lt;/code&gt; content inside the file for reasons, but you can
also have a local file and use ruby to read from it, which is a
little more best-practice-y. Also note that you'll need to give the
file proper permissions once you've made it!&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
  &lt;span class="n"&gt;manifest&lt;/span&gt; &lt;span class="o"&gt;=&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class="sh"&gt;&lt;/span&gt;&lt;span class="no"&gt;EOS&lt;/span&gt;&lt;span class="sh"&gt;&lt;/span&gt;
&lt;span class="sh"&gt;class #{&amp;#64;class_name} {
  file { '/tmp/make_sure_this_exists':
    ensure =&amp;gt; present
  }
}
&lt;/span&gt;&lt;span class="no"&gt;  EOS
&lt;/span&gt;  &lt;span class="n"&gt;create_remote_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;&amp;#64;modules_path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/init.pp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;manifest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;chmod 644 &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;&amp;#64;modules_path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/init.pp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;Verify that it worked&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'puppet agent -t'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;agents&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;not_controller&lt;/span&gt; &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;ls_output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'ls /tmp/make_sure_this_exists'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;
&lt;span class="n"&gt;assert_equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ls_output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'/tmp/make_sure_this_exists'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error_message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are lots of ways to verify that it worked, this runs
&lt;code&gt;puppet agent -t&lt;/code&gt; on the master (which compiles the catalog and
applies it to all the agents), then verifies that the output of 'ls'
on the master includes the file our class put there.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Hopefully this was helpful and what you are looking for! This is
really the &lt;em&gt;bare minimum&lt;/em&gt;, need-to-know-basis level of creating a
custom class, for when you just need to get the thing done and don't
want to learn &lt;strong&gt;All Of Puppet&lt;/strong&gt;.  If you do want to learn all of
puppet though, there are some links below!  Enjoy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="puppet-resources"&gt;
&lt;h2&gt;Puppet Resources&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://puppet.com/download-learning-vm"&gt;Learning VM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.example42.com/tutorials/PuppetTutorial/#slide-0"&gt;Puppet Tutorial&lt;/a&gt; slide deck by Alessandro Franceschi&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://sysadmincasts.com/episodes/8-learning-puppet-with-vagrant"&gt;Learn Puppet with Vagrant&lt;/a&gt; by Justin Weissig&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.pindi.us/blog/getting-started-puppet"&gt;Getting Started with Puppet&lt;/a&gt; by Pindi Albert&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="tech"></category><category term="puppet"></category></entry><entry><title>Openstack Image Default Username Reference</title><link href="http://blog.lucywyman.me/openstack-image-default-username-reference.html" rel="alternate"></link><published>2016-09-06T00:00:00-07:00</published><updated>2016-09-06T00:00:00-07:00</updated><author><name>Lucy Wyman</name></author><id>tag:blog.lucywyman.me,2016-09-06:openstack-image-default-username-reference.html</id><summary type="html">&lt;p&gt;This seems like something that should exist on the internet and kind of
doesn't (or should at least be more searchable). These are only valid if you
obtain an official image from the respective projects repository, and may or
may not be the same if you use a manual image.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="45%" /&gt;
&lt;col width="55%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Image&lt;/th&gt;
&lt;th class="head"&gt;Default Username&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;centos_(6|7)_x86_64&lt;/td&gt;
&lt;td&gt;centos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;cirros_0.3.[0-4]_x86_64&lt;/td&gt;
&lt;td&gt;cirros&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;debian_8.2.0_x86_64&lt;/td&gt;
&lt;td&gt;debian&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;ubuntu_1(4|6).04_x86_64&lt;/td&gt;
&lt;td&gt;ubuntu&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;fedora_23_x86_64&lt;/td&gt;
&lt;td&gt;fedora&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;rhel_7.2_x86_64&lt;/td&gt;
&lt;td&gt;cloud-user (snowflake much?)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;If you're still not sure, I tend to find which user Openstack wants me to use by trying to login to the instance as root, and get a message similar to:
&lt;tt class="docutils literal"&gt;`
Please login as the user &lt;span class="pre"&gt;&amp;quot;cloud-user&amp;quot;&lt;/span&gt; rather than the user &amp;quot;root&amp;quot;.
Connection to 10.32.161.253 closed.
`&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Source: &lt;a class="reference external" href="http://docs.openstack.org/image-guide/obtain-images.html"&gt;http://docs.openstack.org/image-guide/obtain-images.html&lt;/a&gt;&lt;/p&gt;
</summary><category term="tech"></category><category term="openstack"></category></entry><entry><title>Apps I Love</title><link href="http://blog.lucywyman.me/apps-to-love.html" rel="alternate"></link><published>2016-03-19T00:00:00-07:00</published><updated>2016-03-19T00:00:00-07:00</updated><author><name>Lucy Wyman</name></author><id>tag:blog.lucywyman.me,2016-03-19:apps-to-love.html</id><summary type="html">&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;picture of me w/ phone&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;With so many applications out there, it's difficult to discern which are
valuable, usable, and do what you expect them to.  So, for the sake
of those like me, here are some of the applications I have found
particularly useful or entertaining. I should also mention that these are
all free and available on Android.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://multco.lib.overdrive.com"&gt;Overdrive&lt;/a&gt;: You can connect overdrive to local libraries and checkout
books to read or listen to on mobile. I use it to download and listen to
audiobooks, and honestly went from reading 0 books/year to about 1/week.
It's completely changed my life, and made the mundane moments like doing
laundry or walking to class more entertaining.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=de.danoeh.antennapod&amp;amp;hl=en"&gt;AntennaPod&lt;/a&gt;: Similar to Overdrive, this app brings you great listening
material in a different form: podcasts.  It has lots of fancy features now
like adjustable playback speed, automatic deletion once you've listened
to an episode, and turning off if you fall asleep.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=another.music.player&amp;amp;hl=en"&gt;Shuttle&lt;/a&gt;: This is just a music player I'm happy with. If you're happy
with your music player, I wouldn't worry about it.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.acorns.android&amp;amp;hl=en"&gt;Acorns&lt;/a&gt;: The idea here is that it rounds up any debit/credit card purchases
you make to the next dollar, invests the money, and then you have access
to it whenver you need it, and it can continue to grow if you don't.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.bandsintown&amp;amp;hl=en"&gt;Bandsintown&lt;/a&gt;: You've probably heard of this one, but if not, it's a great
way to find shows in your city.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.wb.headsup&amp;amp;hl=en"&gt;Heads up&lt;/a&gt;: This a fun &amp;quot;We're waiting for something and need to pass
the time&amp;quot; app. It's especially great with kids.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.mint&amp;amp;hl=en"&gt;Mint&lt;/a&gt;: I use this mostly to set and maintain budgets. You need to give it
some very personal banking information, so if you're not into that this isn't
for you, but if you are I've found it very useful. You can even see your
credit score on it, which is always good to know!&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.duolingo.com/"&gt;Duolingo&lt;/a&gt;: You've more than likely already heard of this, but if not
it's an addictive, gamified way of learning new languages.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.google.android.apps.onetoday&amp;amp;hl=en"&gt;One Today&lt;/a&gt;: A super easy way to make donations to charities.&lt;/li&gt;
&lt;/ol&gt;
</summary><category term="loves"></category><category term="tech"></category></entry></feed>